
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800486c  0800486c  0000586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004908  08004908  000061ac  2**0
                  CONTENTS
  4 .ARM          00000008  08004908  08004908  00005908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004910  08004910  000061ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004910  08004910  00005910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004914  08004914  00005914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  08004918  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001ac  08004ac4  000061ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08004ac4  000064b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab1d  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d8  00000000  00000000  00010cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00012dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000764  00000000  00000000  000137a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002769e  00000000  00000000  00013f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b109  00000000  00000000  0003b5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0f9a  00000000  00000000  000466b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013764d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c1c  00000000  00000000  00137690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0013a2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ac 	.word	0x200001ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004854 	.word	0x08004854

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b0 	.word	0x200001b0
 80001cc:	08004854 	.word	0x08004854

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 80008a2:	2006      	movs	r0, #6
 80008a4:	f003 fb12 	bl	8003ecc <malloc>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b70      	ldr	r3, [pc, #448]	@ (8000a70 <ble_init+0x1d4>)
 80008ae:	601a      	str	r2, [r3, #0]
	 int res;

	 while(!dataAvailable);
 80008b0:	bf00      	nop
 80008b2:	4b70      	ldr	r3, [pc, #448]	@ (8000a74 <ble_init+0x1d8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0fb      	beq.n	80008b2 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 80008ba:	4b6d      	ldr	r3, [pc, #436]	@ (8000a70 <ble_init+0x1d4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2106      	movs	r1, #6
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f905 	bl	8000ad0 <fetchBleEvent>
 80008c6:	6078      	str	r0, [r7, #4]

	 if(res==BLE_OK){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d111      	bne.n	80008f2 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80008ce:	4b68      	ldr	r3, [pc, #416]	@ (8000a70 <ble_init+0x1d4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2206      	movs	r2, #6
 80008d4:	4968      	ldr	r1, [pc, #416]	@ (8000a78 <ble_init+0x1dc>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f984 	bl	8000be4 <checkEventResp>
 80008dc:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d106      	bne.n	80008f2 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80008e4:	4b65      	ldr	r3, [pc, #404]	@ (8000a7c <ble_init+0x1e0>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b63      	ldr	r3, [pc, #396]	@ (8000a7c <ble_init+0x1e0>)
 80008f0:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80008f2:	200a      	movs	r0, #10
 80008f4:	f001 fbcc 	bl	8002090 <HAL_Delay>
	 free(rxEvent);
 80008f8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a70 <ble_init+0x1d4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 faed 	bl	8003edc <free>

	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 8000902:	2300      	movs	r3, #0
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2307      	movs	r3, #7
 8000908:	4a5d      	ldr	r2, [pc, #372]	@ (8000a80 <ble_init+0x1e4>)
 800090a:	2104      	movs	r1, #4
 800090c:	485d      	ldr	r0, [pc, #372]	@ (8000a84 <ble_init+0x1e8>)
 800090e:	f000 faa1 	bl	8000e54 <BLE_command>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d106      	bne.n	8000926 <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 8000918:	4b58      	ldr	r3, [pc, #352]	@ (8000a7c <ble_init+0x1e0>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b56      	ldr	r3, [pc, #344]	@ (8000a7c <ble_init+0x1e0>)
 8000924:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000926:	4b52      	ldr	r3, [pc, #328]	@ (8000a70 <ble_init+0x1d4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fad6 	bl	8003edc <free>

	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000930:	2303      	movs	r3, #3
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2307      	movs	r3, #7
 8000936:	4a54      	ldr	r2, [pc, #336]	@ (8000a88 <ble_init+0x1ec>)
 8000938:	2107      	movs	r1, #7
 800093a:	4854      	ldr	r0, [pc, #336]	@ (8000a8c <ble_init+0x1f0>)
 800093c:	f000 fa8a 	bl	8000e54 <BLE_command>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d11b      	bne.n	800097e <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 8000946:	4b4d      	ldr	r3, [pc, #308]	@ (8000a7c <ble_init+0x1e0>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	b29a      	uxth	r2, r3
 8000950:	4b4a      	ldr	r3, [pc, #296]	@ (8000a7c <ble_init+0x1e0>)
 8000952:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000954:	4b46      	ldr	r3, [pc, #280]	@ (8000a70 <ble_init+0x1d4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3307      	adds	r3, #7
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a90 <ble_init+0x1f4>)
 8000960:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000962:	4b43      	ldr	r3, [pc, #268]	@ (8000a70 <ble_init+0x1d4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3309      	adds	r3, #9
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b49      	ldr	r3, [pc, #292]	@ (8000a94 <ble_init+0x1f8>)
 800096e:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000970:	4b3f      	ldr	r3, [pc, #252]	@ (8000a70 <ble_init+0x1d4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	330b      	adds	r3, #11
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b47      	ldr	r3, [pc, #284]	@ (8000a98 <ble_init+0x1fc>)
 800097c:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800097e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a70 <ble_init+0x1d4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f003 faaa 	bl	8003edc <free>

	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 8000988:	4b44      	ldr	r3, [pc, #272]	@ (8000a9c <ble_init+0x200>)
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2307      	movs	r3, #7
 800098e:	2200      	movs	r2, #0
 8000990:	4940      	ldr	r1, [pc, #256]	@ (8000a94 <ble_init+0x1f8>)
 8000992:	483f      	ldr	r0, [pc, #252]	@ (8000a90 <ble_init+0x1f4>)
 8000994:	f000 fb24 	bl	8000fe0 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 8000998:	4b38      	ldr	r3, [pc, #224]	@ (8000a7c <ble_init+0x1e0>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <ble_init+0x1e0>)
 80009a4:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 80009a6:	4b32      	ldr	r3, [pc, #200]	@ (8000a70 <ble_init+0x1d4>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fa96 	bl	8003edc <free>

	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 80009b0:	2300      	movs	r3, #0
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2307      	movs	r3, #7
 80009b6:	4a3a      	ldr	r2, [pc, #232]	@ (8000aa0 <ble_init+0x204>)
 80009b8:	2110      	movs	r1, #16
 80009ba:	483a      	ldr	r0, [pc, #232]	@ (8000aa4 <ble_init+0x208>)
 80009bc:	f000 fa4a 	bl	8000e54 <BLE_command>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d106      	bne.n	80009d4 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80009c6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a7c <ble_init+0x1e0>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a7c <ble_init+0x1e0>)
 80009d2:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80009d4:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <ble_init+0x1d4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fa7f 	bl	8003edc <free>

	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2307      	movs	r3, #7
 80009e4:	4a30      	ldr	r2, [pc, #192]	@ (8000aa8 <ble_init+0x20c>)
 80009e6:	2106      	movs	r1, #6
 80009e8:	4830      	ldr	r0, [pc, #192]	@ (8000aac <ble_init+0x210>)
 80009ea:	f000 fa33 	bl	8000e54 <BLE_command>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d106      	bne.n	8000a02 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80009f4:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <ble_init+0x1e0>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	f043 0320 	orr.w	r3, r3, #32
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <ble_init+0x1e0>)
 8000a00:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000a02:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <ble_init+0x1d4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 fa68 	bl	8003edc <free>

	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2307      	movs	r3, #7
 8000a12:	4a27      	ldr	r2, [pc, #156]	@ (8000ab0 <ble_init+0x214>)
 8000a14:	2124      	movs	r1, #36	@ 0x24
 8000a16:	4827      	ldr	r0, [pc, #156]	@ (8000ab4 <ble_init+0x218>)
 8000a18:	f000 fa1c 	bl	8000e54 <BLE_command>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d106      	bne.n	8000a30 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <ble_init+0x1e0>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <ble_init+0x1e0>)
 8000a2e:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <ble_init+0x1d4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 fa51 	bl	8003edc <free>

	 //This will start the advertisment,
	 setConnectable();
 8000a3a:	f000 f98b 	bl	8000d54 <setConnectable>

	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000a3e:	2207      	movs	r2, #7
 8000a40:	491d      	ldr	r1, [pc, #116]	@ (8000ab8 <ble_init+0x21c>)
 8000a42:	481e      	ldr	r0, [pc, #120]	@ (8000abc <ble_init+0x220>)
 8000a44:	f000 fa52 	bl	8000eec <addService>

	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 8000a48:	2310      	movs	r3, #16
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2314      	movs	r3, #20
 8000a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab8 <ble_init+0x21c>)
 8000a50:	491b      	ldr	r1, [pc, #108]	@ (8000ac0 <ble_init+0x224>)
 8000a52:	481c      	ldr	r0, [pc, #112]	@ (8000ac4 <ble_init+0x228>)
 8000a54:	f000 fa82 	bl	8000f5c <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 8000a58:	2304      	movs	r3, #4
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2314      	movs	r3, #20
 8000a5e:	4a16      	ldr	r2, [pc, #88]	@ (8000ab8 <ble_init+0x21c>)
 8000a60:	4919      	ldr	r1, [pc, #100]	@ (8000ac8 <ble_init+0x22c>)
 8000a62:	481a      	ldr	r0, [pc, #104]	@ (8000acc <ble_init+0x230>)
 8000a64:	f000 fa7a 	bl	8000f5c <addCharacteristic>

	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 8000a68:	bf00      	nop
 }
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200002e0 	.word	0x200002e0
 8000a74:	200002e4 	.word	0x200002e4
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	200002de 	.word	0x200002de
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	20000008 	.word	0x20000008
 8000a88:	2000001c 	.word	0x2000001c
 8000a8c:	20000014 	.word	0x20000014
 8000a90:	200001c8 	.word	0x200001c8
 8000a94:	200001cc 	.word	0x200001cc
 8000a98:	200001d0 	.word	0x200001d0
 8000a9c:	20000110 	.word	0x20000110
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	20000024 	.word	0x20000024
 8000aa8:	20000044 	.word	0x20000044
 8000aac:	2000003c 	.word	0x2000003c
 8000ab0:	20000070 	.word	0x20000070
 8000ab4:	2000004c 	.word	0x2000004c
 8000ab8:	200002d4 	.word	0x200002d4
 8000abc:	20000118 	.word	0x20000118
 8000ac0:	200002dc 	.word	0x200002dc
 8000ac4:	20000138 	.word	0x20000138
 8000ac8:	200002d8 	.word	0x200002d8
 8000acc:	20000128 	.word	0x20000128

08000ad0 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }

 int fetchBleEvent(uint8_t *container, int size){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	@ 0x30
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]

   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000ada:	4a3d      	ldr	r2, [pc, #244]	@ (8000bd0 <fetchBleEvent+0x100>)
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae4:	6018      	str	r0, [r3, #0]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];

   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000aea:	2140      	movs	r1, #64	@ 0x40
 8000aec:	4839      	ldr	r0, [pc, #228]	@ (8000bd4 <fetchBleEvent+0x104>)
 8000aee:	f001 fdcf 	bl	8002690 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d065      	beq.n	8000bc4 <fetchBleEvent+0xf4>

   HAL_Delay(5);
 8000af8:	2005      	movs	r0, #5
 8000afa:	f001 fac9 	bl	8002090 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b04:	4834      	ldr	r0, [pc, #208]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000b06:	f001 fddb 	bl	80026c0 <HAL_GPIO_WritePin>

   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000b0a:	f107 0210 	add.w	r2, r7, #16
 8000b0e:	f107 0118 	add.w	r1, r7, #24
 8000b12:	2301      	movs	r3, #1
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2305      	movs	r3, #5
 8000b18:	4830      	ldr	r0, [pc, #192]	@ (8000bdc <fetchBleEvent+0x10c>)
 8000b1a:	f002 fe51 	bl	80037c0 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b24:	482c      	ldr	r0, [pc, #176]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000b26:	f001 fdcb 	bl	80026c0 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f001 fab0 	bl	8002090 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b36:	4828      	ldr	r0, [pc, #160]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000b38:	f001 fdc2 	bl	80026c0 <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000b3c:	f107 0210 	add.w	r2, r7, #16
 8000b40:	f107 0118 	add.w	r1, r7, #24
 8000b44:	2301      	movs	r3, #1
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2305      	movs	r3, #5
 8000b4a:	4824      	ldr	r0, [pc, #144]	@ (8000bdc <fetchBleEvent+0x10c>)
 8000b4c:	f002 fe38 	bl	80037c0 <HAL_SPI_TransmitReceive>

   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
 8000b52:	461a      	mov	r2, r3
 8000b54:	7d3b      	ldrb	r3, [r7, #20]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000b5c:	23ff      	movs	r3, #255	@ 0xff
 8000b5e:	73fb      	strb	r3, [r7, #15]

   if(dataSize>size){
 8000b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dd01      	ble.n	8000b6c <fetchBleEvent+0x9c>
	   dataSize=size;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   }

   if(dataSize>0){
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	dd1f      	ble.n	8000bb2 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
 8000b76:	e00d      	b.n	8000b94 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	441a      	add	r2, r3
 8000b7e:	f107 010f 	add.w	r1, r7, #15
 8000b82:	2301      	movs	r3, #1
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2301      	movs	r3, #1
 8000b88:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <fetchBleEvent+0x10c>)
 8000b8a:	f002 fe19 	bl	80037c0 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000b8e:	6a3b      	ldr	r3, [r7, #32]
 8000b90:	3301      	adds	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	6a3a      	ldr	r2, [r7, #32]
 8000b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbed      	blt.n	8000b78 <fetchBleEvent+0xa8>

		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba2:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000ba4:	f001 fd8c 	bl	80026c0 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }

   //let's stop the SPI2
   dataAvailable=0;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <fetchBleEvent+0x110>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb8:	4807      	ldr	r0, [pc, #28]	@ (8000bd8 <fetchBleEvent+0x108>)
 8000bba:	f001 fd81 	bl	80026c0 <HAL_GPIO_WritePin>
		 return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc2:	e001      	b.n	8000bc8 <fetchBleEvent+0xf8>
   }else{
   return -2;
 8000bc4:	f06f 0301 	mvn.w	r3, #1
   }
 }
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	0800486c 	.word	0x0800486c
 8000bd4:	48001000 	.word	0x48001000
 8000bd8:	48000c00 	.word	0x48000c00
 8000bdc:	200002e8 	.word	0x200002e8
 8000be0:	200002e4 	.word	0x200002e4

08000be4 <checkEventResp>:


 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
	 int j=0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

	 for(j=0;j<size;j++){
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e00f      	b.n	8000c1a <checkEventResp+0x36>

		 if(event[j]!=reference[j]){
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	440b      	add	r3, r1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d002      	beq.n	8000c14 <checkEventResp+0x30>
			 return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c12:	e007      	b.n	8000c24 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbeb      	blt.n	8000bfa <checkEventResp+0x16>
		 }
	 }

 return BLE_OK;
 8000c22:	2300      	movs	r3, #0
 }
 8000c24:	4618      	mov	r0, r3
 8000c26:	371c      	adds	r7, #28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <sendCommand>:

 void sendCommand(uint8_t *command,int size){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb8 <sendCommand+0x88>)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c44:	6018      	str	r0, [r3, #0]
 8000c46:	3304      	adds	r3, #4
 8000c48:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];

	   int result;

	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c50:	481a      	ldr	r0, [pc, #104]	@ (8000cbc <sendCommand+0x8c>)
 8000c52:	f001 fd35 	bl	80026c0 <HAL_GPIO_WritePin>

	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000c56:	f107 0208 	add.w	r2, r7, #8
 8000c5a:	f107 0110 	add.w	r1, r7, #16
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2305      	movs	r3, #5
 8000c64:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <sendCommand+0x90>)
 8000c66:	f002 fdab 	bl	80037c0 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000c6a:	7abb      	ldrb	r3, [r7, #10]
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	7a7a      	ldrb	r2, [r7, #9]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	db09      	blt.n	8000c90 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	2301      	movs	r3, #1
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	480e      	ldr	r0, [pc, #56]	@ (8000cc0 <sendCommand+0x90>)
 8000c86:	f002 fc26 	bl	80034d6 <HAL_SPI_Transmit>
		 result=0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e002      	b.n	8000c96 <sendCommand+0x66>
	   }else{
		 result=-1;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c94:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9c:	4807      	ldr	r0, [pc, #28]	@ (8000cbc <sendCommand+0x8c>)
 8000c9e:	f001 fd0f 	bl	80026c0 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <sendCommand+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1cd      	bne.n	8000c4a <sendCommand+0x1a>

 }
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	08004874 	.word	0x08004874
 8000cbc:	48000c00 	.word	0x48000c00
 8000cc0:	200002e8 	.word	0x200002e8
 8000cc4:	200002e4 	.word	0x200002e4

08000cc8 <catchBLE>:

 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 8000cd2:	217f      	movs	r1, #127	@ 0x7f
 8000cd4:	481a      	ldr	r0, [pc, #104]	@ (8000d40 <catchBLE+0x78>)
 8000cd6:	f7ff fefb 	bl	8000ad0 <fetchBleEvent>
 8000cda:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d12a      	bne.n	8000d38 <catchBLE+0x70>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	4917      	ldr	r1, [pc, #92]	@ (8000d44 <catchBLE+0x7c>)
 8000ce6:	4816      	ldr	r0, [pc, #88]	@ (8000d40 <catchBLE+0x78>)
 8000ce8:	f7ff ff7c 	bl	8000be4 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000cec:	2205      	movs	r2, #5
 8000cee:	4916      	ldr	r1, [pc, #88]	@ (8000d48 <catchBLE+0x80>)
 8000cf0:	4813      	ldr	r0, [pc, #76]	@ (8000d40 <catchBLE+0x78>)
 8000cf2:	f7ff ff77 	bl	8000be4 <checkEventResp>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <catchBLE+0x78>)
 8000cfe:	795b      	ldrb	r3, [r3, #5]
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <catchBLE+0x84>)
 8000d04:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <catchBLE+0x78>)
 8000d08:	799b      	ldrb	r3, [r3, #6]
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <catchBLE+0x84>)
 8000d0e:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5)){
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <catchBLE+0x88>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2205      	movs	r2, #5
 8000d16:	4619      	mov	r1, r3
 8000d18:	4809      	ldr	r0, [pc, #36]	@ (8000d40 <catchBLE+0x78>)
 8000d1a:	f7ff ff63 	bl	8000be4 <checkEventResp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d009      	beq.n	8000d38 <catchBLE+0x70>
			 *(connectionHandler) = buffer[5];
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <catchBLE+0x78>)
 8000d26:	795b      	ldrb	r3, [r3, #5]
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <catchBLE+0x84>)
 8000d2c:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <catchBLE+0x78>)
 8000d30:	799b      	ldrb	r3, [r3, #6]
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <catchBLE+0x84>)
 8000d36:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200001d4 	.word	0x200001d4
 8000d44:	200000f0 	.word	0x200000f0
 8000d48:	200000fc 	.word	0x200000fc
 8000d4c:	20000148 	.word	0x20000148
 8000d50:	20000101 	.word	0x20000101

08000d54 <setConnectable>:

 void setConnectable(){
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
		uint8_t* rxEvent;
		//Start advertising
		uint8_t *localname;
		int res;
		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000d5a:	200c      	movs	r0, #12
 8000d5c:	f003 f8b6 	bl	8003ecc <malloc>
 8000d60:	4603      	mov	r3, r0
 8000d62:	60fb      	str	r3, [r7, #12]
		memcpy(localname,deviceName,sizeof(deviceName));
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4a36      	ldr	r2, [pc, #216]	@ (8000e40 <setConnectable+0xec>)
 8000d68:	6810      	ldr	r0, [r2, #0]
 8000d6a:	6018      	str	r0, [r3, #0]
 8000d6c:	8891      	ldrh	r1, [r2, #4]
 8000d6e:	7992      	ldrb	r2, [r2, #6]
 8000d70:	8099      	strh	r1, [r3, #4]
 8000d72:	719a      	strb	r2, [r3, #6]
		localname[sizeof(deviceName)+1]=0x00;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3308      	adds	r3, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+2]=0x00;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3309      	adds	r3, #9
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+3]=0x00;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	330a      	adds	r3, #10
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+4]=0x00;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	330b      	adds	r3, #11
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)]=0x00;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3307      	adds	r3, #7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]


		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000d9c:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <setConnectable+0xf0>)
 8000d9e:	2208      	movs	r2, #8
 8000da0:	72da      	strb	r2, [r3, #11]
		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000da2:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <setConnectable+0xf0>)
 8000da4:	2215      	movs	r2, #21
 8000da6:	70da      	strb	r2, [r3, #3]

		uint8_t *discoverableCommand;
		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000da8:	2019      	movs	r0, #25
 8000daa:	f003 f88f 	bl	8003ecc <malloc>
 8000dae:	4603      	mov	r3, r0
 8000db0:	60bb      	str	r3, [r7, #8]
		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	4a23      	ldr	r2, [pc, #140]	@ (8000e44 <setConnectable+0xf0>)
 8000db6:	461c      	mov	r4, r3
 8000db8:	4613      	mov	r3, r2
 8000dba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000dbc:	6020      	str	r0, [r4, #0]
 8000dbe:	6061      	str	r1, [r4, #4]
 8000dc0:	60a2      	str	r2, [r4, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	7323      	strb	r3, [r4, #12]
		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	330d      	adds	r3, #13
 8000dca:	220c      	movs	r2, #12
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 f9b2 	bl	8004138 <memcpy>

		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000dd4:	2119      	movs	r1, #25
 8000dd6:	68b8      	ldr	r0, [r7, #8]
 8000dd8:	f7ff ff2a 	bl	8000c30 <sendCommand>
		rxEvent=(uint8_t*)malloc(7);
 8000ddc:	2007      	movs	r0, #7
 8000dde:	f003 f875 	bl	8003ecc <malloc>
 8000de2:	4603      	mov	r3, r0
 8000de4:	607b      	str	r3, [r7, #4]
		while(!dataAvailable);
 8000de6:	bf00      	nop
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <setConnectable+0xf4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0fb      	beq.n	8000de8 <setConnectable+0x94>
		res=fetchBleEvent(rxEvent,7);
 8000df0:	2107      	movs	r1, #7
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fe6c 	bl	8000ad0 <fetchBleEvent>
 8000df8:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10f      	bne.n	8000e20 <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000e00:	2207      	movs	r2, #7
 8000e02:	4912      	ldr	r1, [pc, #72]	@ (8000e4c <setConnectable+0xf8>)
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff feed 	bl	8000be4 <checkEventResp>
 8000e0a:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d106      	bne.n	8000e20 <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <setConnectable+0xfc>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <setConnectable+0xfc>)
 8000e1e:	801a      	strh	r2, [r3, #0]
		}
		}

		free(rxEvent);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f003 f85b 	bl	8003edc <free>
		free(discoverableCommand);
 8000e26:	68b8      	ldr	r0, [r7, #8]
 8000e28:	f003 f858 	bl	8003edc <free>
		free(localname);
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f003 f855 	bl	8003edc <free>
		HAL_Delay(10);
 8000e32:	200a      	movs	r0, #10
 8000e34:	f001 f92c 	bl	8002090 <HAL_Delay>
 }
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	20000110 	.word	0x20000110
 8000e44:	20000078 	.word	0x20000078
 8000e48:	200002e4 	.word	0x200002e4
 8000e4c:	20000088 	.word	0x20000088
 8000e50:	200002de 	.word	0x200002de

08000e54 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
		int response;

		sendCommand(command,size);
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff fee3 	bl	8000c30 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	005a      	lsls	r2, r3, #1
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	4413      	add	r3, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 f82a 	bl	8003ecc <malloc>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <BLE_command+0x90>)
 8000e7e:	601a      	str	r2, [r3, #0]

		long contatore=0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000e84:	e007      	b.n	8000e96 <BLE_command+0x42>
			contatore++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000e92:	4293      	cmp	r3, r2
 8000e94:	dc07      	bgt.n	8000ea6 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	4813      	ldr	r0, [pc, #76]	@ (8000ee8 <BLE_command+0x94>)
 8000e9a:	f001 fbf9 	bl	8002690 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f0      	beq.n	8000e86 <BLE_command+0x32>
 8000ea4:	e000      	b.n	8000ea8 <BLE_command+0x54>
				break;
 8000ea6:	bf00      	nop
			}
		}


		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <BLE_command+0x90>)
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	005a      	lsls	r2, r3, #1
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fe0b 	bl	8000ad0 <fetchBleEvent>
 8000eba:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d107      	bne.n	8000ed2 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <BLE_command+0x90>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe8a 	bl	8000be4 <checkEventResp>
 8000ed0:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 8000ed2:	200a      	movs	r0, #10
 8000ed4:	f001 f8dc 	bl	8002090 <HAL_Delay>


	 return response;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 }
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200002e0 	.word	0x200002e0
 8000ee8:	48001000 	.word	0x48001000

08000eec <addService>:

 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]


	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <addService+0x60>)
 8000efa:	2210      	movs	r2, #16
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 f91a 	bl	8004138 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <addService+0x64>)
 8000f0a:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2307      	movs	r3, #7
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <addService+0x68>)
 8000f14:	2117      	movs	r1, #23
 8000f16:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <addService+0x64>)
 8000f18:	f7ff ff9c 	bl	8000e54 <BLE_command>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10a      	bne.n	8000f38 <addService+0x4c>
			handle[0]=rxEvent[7];
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <addService+0x6c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	79da      	ldrb	r2, [r3, #7]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <addService+0x6c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	3301      	adds	r3, #1
 8000f34:	7a12      	ldrb	r2, [r2, #8]
 8000f36:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <addService+0x6c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 ffcd 	bl	8003edc <free>
 }
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000095 	.word	0x20000095
 8000f50:	20000090 	.word	0x20000090
 8000f54:	200000a8 	.word	0x200000a8
 8000f58:	200002e0 	.word	0x200002e0

08000f5c <addCharacteristic>:

 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <addCharacteristic+0x74>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	68f9      	ldr	r1, [r7, #12]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 f8e1 	bl	8004138 <memcpy>

	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f7c:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	785a      	ldrb	r2, [r3, #1]
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f84:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000f86:	4a13      	ldr	r2, [pc, #76]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 8000f8c:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f8e:	7e3b      	ldrb	r3, [r7, #24]
 8000f90:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000f92:	2301      	movs	r3, #1
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2307      	movs	r3, #7
 8000f98:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <addCharacteristic+0x7c>)
 8000f9a:	211e      	movs	r1, #30
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <addCharacteristic+0x78>)
 8000f9e:	f7ff ff59 	bl	8000e54 <BLE_command>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <addCharacteristic+0x80>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	79da      	ldrb	r2, [r3, #7]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <addCharacteristic+0x80>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	7a12      	ldrb	r2, [r2, #8]
 8000fbc:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000fbe:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <addCharacteristic+0x80>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 ff8a 	bl	8003edc <free>
 }
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000b7 	.word	0x200000b7
 8000fd4:	200000b0 	.word	0x200000b0
 8000fd8:	200000d0 	.word	0x200000d0
 8000fdc:	200002e0 	.word	0x200002e0

08000fe0 <updateCharValue>:

 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	3306      	adds	r3, #6
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <updateCharValue+0x9c>)
 8000ff8:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <updateCharValue+0x9c>)
 8001000:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	785a      	ldrb	r2, [r3, #1]
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <updateCharValue+0x9c>)
 8001008:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <updateCharValue+0x9c>)
 8001010:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	785a      	ldrb	r2, [r3, #1]
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <updateCharValue+0x9c>)
 8001018:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <updateCharValue+0x9c>)
 8001020:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <updateCharValue+0x9c>)
 8001028:	725a      	strb	r2, [r3, #9]

	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	330a      	adds	r3, #10
 800102e:	4618      	mov	r0, r3
 8001030:	f002 ff4c 	bl	8003ecc <malloc>
 8001034:	4603      	mov	r3, r0
 8001036:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8001038:	220a      	movs	r2, #10
 800103a:	4910      	ldr	r1, [pc, #64]	@ (800107c <updateCharValue+0x9c>)
 800103c:	6978      	ldr	r0, [r7, #20]
 800103e:	f003 f87b 	bl	8004138 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	330a      	adds	r3, #10
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	6a39      	ldr	r1, [r7, #32]
 800104a:	4618      	mov	r0, r3
 800104c:	f003 f874 	bl	8004138 <memcpy>

	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f103 010a 	add.w	r1, r3, #10
 8001056:	2300      	movs	r3, #0
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2307      	movs	r3, #7
 800105c:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <updateCharValue+0xa0>)
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff fef8 	bl	8000e54 <BLE_command>

	 free(commandComplete);
 8001064:	6978      	ldr	r0, [r7, #20]
 8001066:	f002 ff39 	bl	8003edc <free>
	 free(rxEvent);
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <updateCharValue+0xa4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f002 ff34 	bl	8003edc <free>
 }
 8001074:	bf00      	nop
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000d8 	.word	0x200000d8
 8001080:	200000d0 	.word	0x200000d0
 8001084:	200002e0 	.word	0x200002e0

08001088 <disconnectBLE>:

 /**
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 800108e:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <disconnectBLE+0x98>)
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001098:	d105      	bne.n	80010a6 <disconnectBLE+0x1e>
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <disconnectBLE+0x98>)
 800109c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010a4:	d037      	beq.n	8001116 <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <disconnectBLE+0x9c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 80010ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <disconnectBLE+0x98>)
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <disconnectBLE+0x98>)
 80010b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 80010c0:	2313      	movs	r3, #19
 80010c2:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 80010c4:	1d38      	adds	r0, r7, #4
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2307      	movs	r3, #7
 80010cc:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <disconnectBLE+0xa0>)
 80010ce:	2107      	movs	r1, #7
 80010d0:	f7ff fec0 	bl	8000e54 <BLE_command>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11e      	bne.n	8001118 <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 80010da:	217f      	movs	r1, #127	@ 0x7f
 80010dc:	4813      	ldr	r0, [pc, #76]	@ (800112c <disconnectBLE+0xa4>)
 80010de:	f7ff fcf7 	bl	8000ad0 <fetchBleEvent>
 80010e2:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 80010ea:	2204      	movs	r2, #4
 80010ec:	4910      	ldr	r1, [pc, #64]	@ (8001130 <disconnectBLE+0xa8>)
 80010ee:	480f      	ldr	r0, [pc, #60]	@ (800112c <disconnectBLE+0xa4>)
 80010f0:	f7ff fd78 	bl	8000be4 <checkEventResp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d107      	bne.n	800110a <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <disconnectBLE+0x98>)
 80010fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001100:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <disconnectBLE+0x98>)
 8001104:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001108:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <disconnectBLE+0xac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fee4 	bl	8003edc <free>
 8001114:	e000      	b.n	8001118 <disconnectBLE+0x90>
		return;
 8001116:	bf00      	nop
	 }
 }
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000148 	.word	0x20000148
 8001124:	200000e8 	.word	0x200000e8
 8001128:	200000f4 	.word	0x200000f4
 800112c:	200001d4 	.word	0x200001d4
 8001130:	200000f0 	.word	0x200000f0
 8001134:	200002e0 	.word	0x200002e0

08001138 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d102      	bne.n	800114e <setDiscoverability+0x16>
		 setConnectable();
 8001148:	f7ff fe04 	bl	8000d54 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 800114c:	e00f      	b.n	800116e <setDiscoverability+0x36>
	 else if (mode == 0){
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10c      	bne.n	800116e <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2307      	movs	r3, #7
 800115a:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <setDiscoverability+0x40>)
 800115c:	2104      	movs	r1, #4
 800115e:	4807      	ldr	r0, [pc, #28]	@ (800117c <setDiscoverability+0x44>)
 8001160:	f7ff fe78 	bl	8000e54 <BLE_command>
		 free(rxEvent);
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <setDiscoverability+0x48>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f002 feb7 	bl	8003edc <free>
 }
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000108 	.word	0x20000108
 800117c:	20000104 	.word	0x20000104
 8001180:	200002e0 	.word	0x200002e0

08001184 <i2c_init>:
#include "stm32l475xx.h"
#include "i2c.h"

#define TIMEOUT 1000000

void i2c_init() {
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
    // Disable I2C2 for configuration
    I2C2->CR1 &= ~I2C_CR1_PE;
 8001188:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <i2c_init+0xbc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a2c      	ldr	r2, [pc, #176]	@ (8001240 <i2c_init+0xbc>)
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]

    // Enable clocks for GPIOB and I2C2
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <i2c_init+0xc0>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	4a2a      	ldr	r2, [pc, #168]	@ (8001244 <i2c_init+0xc0>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 80011a0:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <i2c_init+0xc0>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	4a27      	ldr	r2, [pc, #156]	@ (8001244 <i2c_init+0xc0>)
 80011a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011aa:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure PB10 (SCL) and PB11 (SDA) for Alternate Function (AF4 for I2C)
    GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11);
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <i2c_init+0xc4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a25      	ldr	r2, [pc, #148]	@ (8001248 <i2c_init+0xc4>)
 80011b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80011b6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);
 80011b8:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <i2c_init+0xc4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a22      	ldr	r2, [pc, #136]	@ (8001248 <i2c_init+0xc4>)
 80011be:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80011c2:	6013      	str	r3, [r2, #0]

    // Configure Alternate Function (AF4) for PB10 and PB11
    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 80011c4:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <i2c_init+0xc4>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001248 <i2c_init+0xc4>)
 80011ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80011ce:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= (GPIO_AFRH_AFSEL10_2 | GPIO_AFRH_AFSEL11_2);
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <i2c_init+0xc4>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <i2c_init+0xc4>)
 80011d6:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 80011da:	6253      	str	r3, [r2, #36]	@ 0x24

    // Set PB10 and PB11 to Open-Drain mode
    GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <i2c_init+0xc4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <i2c_init+0xc4>)
 80011e2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80011e6:	6053      	str	r3, [r2, #4]

    // Enable Pull-up resistors for PB10 and PB11
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD11);
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <i2c_init+0xc4>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <i2c_init+0xc4>)
 80011ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80011f2:	60d3      	str	r3, [r2, #12]
    //Setting them to be pull up
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD10_0 | GPIO_PUPDR_PUPD11_0);
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <i2c_init+0xc4>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4a13      	ldr	r2, [pc, #76]	@ (8001248 <i2c_init+0xc4>)
 80011fa:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80011fe:	60d3      	str	r3, [r2, #12]

    // Set speed for PB10 and PB11
    GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED10 | GPIO_OSPEEDR_OSPEED11);
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <i2c_init+0xc4>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <i2c_init+0xc4>)
 8001206:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800120a:	6093      	str	r3, [r2, #8]
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED10_0 | GPIO_OSPEEDR_OSPEED11_0);
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <i2c_init+0xc4>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <i2c_init+0xc4>)
 8001212:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001216:	6093      	str	r3, [r2, #8]

    // Enable interrupts for TX, RX, and Transfer Complete
    I2C2->CR1 |= (I2C_CR1_TXIE | I2C_CR1_RXIE | I2C_CR1_TCIE);
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <i2c_init+0xbc>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <i2c_init+0xbc>)
 800121e:	f043 0346 	orr.w	r3, r3, #70	@ 0x46
 8001222:	6013      	str	r3, [r2, #0]

    //Incorrect Calcution: our calculates to around 100 when it should be 400
    // Configure Timing Register for 400 kHz I2C Fast Mode
    I2C2->TIMINGR = (7U << I2C_TIMINGR_PRESC_Pos) | // Prescaler = 0, using 4 MHz clock
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <i2c_init+0xbc>)
 8001226:	4a09      	ldr	r2, [pc, #36]	@ (800124c <i2c_init+0xc8>)
 8001228:	611a      	str	r2, [r3, #16]
                    (11U << I2C_TIMINGR_SCLH_Pos) | // SCL high period = 195 (Thigh)
                    (1U << I2C_TIMINGR_SDADEL_Pos) | // Data setup delay = 2
                    (2U << I2C_TIMINGR_SCLDEL_Pos); // Data hold delay = 4

    // Enable I2C2 Peripheral
    I2C2->CR1 |= I2C_CR1_PE;
 800122a:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <i2c_init+0xbc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <i2c_init+0xbc>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6013      	str	r3, [r2, #0]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40005800 	.word	0x40005800
 8001244:	40021000 	.word	0x40021000
 8001248:	48000400 	.word	0x48000400
 800124c:	70210b0b 	.word	0x70210b0b

08001250 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	603a      	str	r2, [r7, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	460b      	mov	r3, r1
 8001260:	71bb      	strb	r3, [r7, #6]
 8001262:	4613      	mov	r3, r2
 8001264:	717b      	strb	r3, [r7, #5]
    uint32_t timeout_counter = TIMEOUT;
 8001266:	4b58      	ldr	r3, [pc, #352]	@ (80013c8 <i2c_transaction+0x178>)
 8001268:	60fb      	str	r3, [r7, #12]

    while ((I2C2->ISR & I2C_ISR_BUSY) && timeout_counter--) {
 800126a:	e004      	b.n	8001276 <i2c_transaction+0x26>
        if (timeout_counter == 0) {
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <i2c_transaction+0x26>
            return 0; // Timeout error
 8001272:	2300      	movs	r3, #0
 8001274:	e0a1      	b.n	80013ba <i2c_transaction+0x16a>
    while ((I2C2->ISR & I2C_ISR_BUSY) && timeout_counter--) {
 8001276:	4b55      	ldr	r3, [pc, #340]	@ (80013cc <i2c_transaction+0x17c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <i2c_transaction+0x3c>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	60fa      	str	r2, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1ef      	bne.n	800126c <i2c_transaction+0x1c>
        }
    }

    if (dir == 0) {  // WRITE operation
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d146      	bne.n	8001320 <i2c_transaction+0xd0>
        I2C2->CR2 = (address << 1) | (0 << 10) | (len << 16);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	005a      	lsls	r2, r3, #1
 8001296:	797b      	ldrb	r3, [r7, #5]
 8001298:	041b      	lsls	r3, r3, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <i2c_transaction+0x17c>)
 800129e:	605a      	str	r2, [r3, #4]
        I2C2->CR2 |= I2C_CR2_START;
 80012a0:	4b4a      	ldr	r3, [pc, #296]	@ (80013cc <i2c_transaction+0x17c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a49      	ldr	r2, [pc, #292]	@ (80013cc <i2c_transaction+0x17c>)
 80012a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012aa:	6053      	str	r3, [r2, #4]

        for (uint8_t i = 0; i < len; i++) {
 80012ac:	2300      	movs	r3, #0
 80012ae:	72fb      	strb	r3, [r7, #11]
 80012b0:	e00f      	b.n	80012d2 <i2c_transaction+0x82>
            while (!(I2C2->ISR & I2C_ISR_TXIS));  // Wait for TX buffer
 80012b2:	bf00      	nop
 80012b4:	4b45      	ldr	r3, [pc, #276]	@ (80013cc <i2c_transaction+0x17c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f9      	beq.n	80012b4 <i2c_transaction+0x64>
            I2C2->TXDR = data[i];  // Send byte
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	4b40      	ldr	r3, [pc, #256]	@ (80013cc <i2c_transaction+0x17c>)
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++) {
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	3301      	adds	r3, #1
 80012d0:	72fb      	strb	r3, [r7, #11]
 80012d2:	7afa      	ldrb	r2, [r7, #11]
 80012d4:	797b      	ldrb	r3, [r7, #5]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3eb      	bcc.n	80012b2 <i2c_transaction+0x62>
        }

        while (!(I2C2->ISR & I2C_ISR_TC)) {
 80012da:	e013      	b.n	8001304 <i2c_transaction+0xb4>
            if (I2C2->ISR & I2C_ISR_NACKF) {
 80012dc:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <i2c_transaction+0x17c>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00d      	beq.n	8001304 <i2c_transaction+0xb4>
                I2C2->ICR |= I2C_ICR_NACKCF;
 80012e8:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <i2c_transaction+0x17c>)
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	4a37      	ldr	r2, [pc, #220]	@ (80013cc <i2c_transaction+0x17c>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	61d3      	str	r3, [r2, #28]
                I2C2->CR2 |= I2C_CR2_STOP;
 80012f4:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <i2c_transaction+0x17c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a34      	ldr	r2, [pc, #208]	@ (80013cc <i2c_transaction+0x17c>)
 80012fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fe:	6053      	str	r3, [r2, #4]
                return 0; // NACK received
 8001300:	2300      	movs	r3, #0
 8001302:	e05a      	b.n	80013ba <i2c_transaction+0x16a>
        while (!(I2C2->ISR & I2C_ISR_TC)) {
 8001304:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <i2c_transaction+0x17c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0e5      	beq.n	80012dc <i2c_transaction+0x8c>
            }
        }

        I2C2->CR2 |= I2C_CR2_STOP;
 8001310:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <i2c_transaction+0x17c>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	4a2d      	ldr	r2, [pc, #180]	@ (80013cc <i2c_transaction+0x17c>)
 8001316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131a:	6053      	str	r3, [r2, #4]
        return 1;
 800131c:	2301      	movs	r3, #1
 800131e:	e04c      	b.n	80013ba <i2c_transaction+0x16a>
    } else {  // READ operation
        I2C2->CR2 = (address << 1) | (1 << 10) | (len << 16);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	431a      	orrs	r2, r3
 800132e:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <i2c_transaction+0x17c>)
 8001330:	605a      	str	r2, [r3, #4]
        I2C2->CR2 |= I2C_CR2_START;
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <i2c_transaction+0x17c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4a25      	ldr	r2, [pc, #148]	@ (80013cc <i2c_transaction+0x17c>)
 8001338:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800133c:	6053      	str	r3, [r2, #4]

        for (uint8_t i = 0; i < len; i++) {
 800133e:	2300      	movs	r3, #0
 8001340:	72bb      	strb	r3, [r7, #10]
 8001342:	e010      	b.n	8001366 <i2c_transaction+0x116>
            while (!(I2C2->ISR & I2C_ISR_RXNE));
 8001344:	bf00      	nop
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <i2c_transaction+0x17c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f9      	beq.n	8001346 <i2c_transaction+0xf6>
            data[i] = I2C2->RXDR;
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <i2c_transaction+0x17c>)
 8001354:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001356:	7abb      	ldrb	r3, [r7, #10]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	4413      	add	r3, r2
 800135c:	b2ca      	uxtb	r2, r1
 800135e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++) {
 8001360:	7abb      	ldrb	r3, [r7, #10]
 8001362:	3301      	adds	r3, #1
 8001364:	72bb      	strb	r3, [r7, #10]
 8001366:	7aba      	ldrb	r2, [r7, #10]
 8001368:	797b      	ldrb	r3, [r7, #5]
 800136a:	429a      	cmp	r2, r3
 800136c:	d3ea      	bcc.n	8001344 <i2c_transaction+0xf4>
        }

        while (!(I2C2->ISR & I2C_ISR_TC)) {
 800136e:	e017      	b.n	80013a0 <i2c_transaction+0x150>
            if (I2C2->ISR & I2C_ISR_NACKF) {
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <i2c_transaction+0x17c>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	2b00      	cmp	r3, #0
 800137a:	d011      	beq.n	80013a0 <i2c_transaction+0x150>
                I2C2->CR2 |= I2C_CR2_STOP;
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <i2c_transaction+0x17c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <i2c_transaction+0x17c>)
 8001382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001386:	6053      	str	r3, [r2, #4]
                while (!(I2C2->ISR & I2C_ISR_STOPF));
 8001388:	bf00      	nop
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <i2c_transaction+0x17c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f9      	beq.n	800138a <i2c_transaction+0x13a>
                I2C2->ICR = I2C_ICR_STOPCF;
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <i2c_transaction+0x17c>)
 8001398:	2220      	movs	r2, #32
 800139a:	61da      	str	r2, [r3, #28]
                return 0; // NACK received
 800139c:	2300      	movs	r3, #0
 800139e:	e00c      	b.n	80013ba <i2c_transaction+0x16a>
        while (!(I2C2->ISR & I2C_ISR_TC)) {
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <i2c_transaction+0x17c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0e1      	beq.n	8001370 <i2c_transaction+0x120>
            }
        }

        I2C2->CR2 |= I2C_CR2_STOP;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <i2c_transaction+0x17c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <i2c_transaction+0x17c>)
 80013b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b6:	6053      	str	r3, [r2, #4]
        return 1;
 80013b8:	2301      	movs	r3, #1
    }
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	000f4240 	.word	0x000f4240
 80013cc:	40005800 	.word	0x40005800

080013d0 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	// Enable the clock for GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80013d4:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <leds_init+0xd0>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a31      	ldr	r2, [pc, #196]	@ (80014a0 <leds_init+0xd0>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Enable the clock for GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <leds_init+0xd0>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	4a2e      	ldr	r2, [pc, #184]	@ (80014a0 <leds_init+0xd0>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Configure PA5 as an output by clearing all bits and setting the mode */
	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 80013ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013f6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80013fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 80013fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800140a:	6013      	str	r3, [r2, #0]
	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 800140c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001416:	f023 0320 	bic.w	r3, r3, #32
 800141a:	6053      	str	r3, [r2, #4]
	/* Disable the internal pull-up and pull-down resistors */
	GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 800141c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001426:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800142a:	60d3      	str	r3, [r2, #12]
	/* Configure the GPIO to use low speed mode */
	GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 800142c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001436:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800143a:	6093      	str	r3, [r2, #8]
	/* Turn off the LED */
	GPIOA->ODR &= ~GPIO_ODR_OD5;
 800143c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001446:	f023 0320 	bic.w	r3, r3, #32
 800144a:	6153      	str	r3, [r2, #20]

	/* Configure PA14 as an output by clearing all bits and setting the mode */
	GPIOB->MODER &= ~GPIO_MODER_MODE14;
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <leds_init+0xd4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <leds_init+0xd4>)
 8001452:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001456:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <leds_init+0xd4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <leds_init+0xd4>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001462:	6013      	str	r3, [r2, #0]
	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <leds_init+0xd4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a0e      	ldr	r2, [pc, #56]	@ (80014a4 <leds_init+0xd4>)
 800146a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800146e:	6053      	str	r3, [r2, #4]
	/* Disable the internal pull-up and pull-down resistors */
	GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <leds_init+0xd4>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4a0b      	ldr	r2, [pc, #44]	@ (80014a4 <leds_init+0xd4>)
 8001476:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800147a:	60d3      	str	r3, [r2, #12]
	/* Configure the GPIO to use low speed mode */
	GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <leds_init+0xd4>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a08      	ldr	r2, [pc, #32]	@ (80014a4 <leds_init+0xd4>)
 8001482:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8001486:	6093      	str	r3, [r2, #8]
	/* Turn off the LED */
	GPIOB->ODR &= ~GPIO_ODR_OD14;
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <leds_init+0xd4>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <leds_init+0xd4>)
 800148e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001492:	6153      	str	r3, [r2, #20]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000400 	.word	0x48000400

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	@ (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	@ (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <lptim1_init>:
 */

#include "lptim.h"

void lptim1_init(LPTIM_TypeDef* timer)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    // Enable clock for LPTIM1
    RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <lptim1_init+0xc0>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	4a2c      	ldr	r2, [pc, #176]	@ (80015f8 <lptim1_init+0xc0>)
 8001546:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800154a:	6593      	str	r3, [r2, #88]	@ 0x58

    RCC->CSR |= RCC_CSR_LSION;
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <lptim1_init+0xc0>)
 800154e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001552:	4a29      	ldr	r2, [pc, #164]	@ (80015f8 <lptim1_init+0xc0>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    // Wait for LSI to be ready
    while ((RCC->CSR & RCC_CSR_LSIRDY) == 0) {}
 800155c:	bf00      	nop
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <lptim1_init+0xc0>)
 8001560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f8      	beq.n	800155e <lptim1_init+0x26>

    // Select clock source (use LSI for low power)
    RCC->CCIPR &= ~RCC_CCIPR_LPTIM1SEL;
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <lptim1_init+0xc0>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001572:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <lptim1_init+0xc0>)
 8001574:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    RCC->CCIPR |= (RCC_CCIPR_LPTIM1SEL_0); // Select LSI (32 kHz)
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <lptim1_init+0xc0>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <lptim1_init+0xc0>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    // Reset LPTIM1
    RCC->APB1RSTR1 |= RCC_APB1RSTR1_LPTIM1RST;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <lptim1_init+0xc0>)
 800158e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001590:	4a19      	ldr	r2, [pc, #100]	@ (80015f8 <lptim1_init+0xc0>)
 8001592:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001596:	6393      	str	r3, [r2, #56]	@ 0x38
    RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_LPTIM1RST;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <lptim1_init+0xc0>)
 800159a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159c:	4a16      	ldr	r2, [pc, #88]	@ (80015f8 <lptim1_init+0xc0>)
 800159e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015a2:	6393      	str	r3, [r2, #56]	@ 0x38

    // Configure LPTIM1 for low-power counting
    LPTIM1->CR = 0;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <lptim1_init+0xc4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
    LPTIM1-> CFGR = 0;
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <lptim1_init+0xc4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]

    // Set prescaler (divide by 32 for ~1ms ticks from 32kHz LSI)
    LPTIM1->CFGR |= LPTIM_CFGR_PRESC_2;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <lptim1_init+0xc4>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4a11      	ldr	r2, [pc, #68]	@ (80015fc <lptim1_init+0xc4>)
 80015b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015ba:	60d3      	str	r3, [r2, #12]

    // Enable LPTIM1
    LPTIM1->CR |= LPTIM_CR_ENABLE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <lptim1_init+0xc4>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a0e      	ldr	r2, [pc, #56]	@ (80015fc <lptim1_init+0xc4>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6113      	str	r3, [r2, #16]

    // Enable interrupt on ARR match
    LPTIM1->IER |= LPTIM_IER_ARRMIE;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <lptim1_init+0xc4>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <lptim1_init+0xc4>)
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	6093      	str	r3, [r2, #8]
    NVIC_EnableIRQ(LPTIM1_IRQn);
 80015d4:	2041      	movs	r0, #65	@ 0x41
 80015d6:	f7ff ff67 	bl	80014a8 <__NVIC_EnableIRQ>
    NVIC_SetPriority(LPTIM1_IRQn, 0);
 80015da:	2100      	movs	r1, #0
 80015dc:	2041      	movs	r0, #65	@ 0x41
 80015de:	f7ff ff81 	bl	80014e4 <__NVIC_SetPriority>

    LPTIM1->CR |= LPTIM_CR_CNTSTRT;
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <lptim1_init+0xc4>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <lptim1_init+0xc4>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6113      	str	r3, [r2, #16]
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40007c00 	.word	0x40007c00

08001600 <lptim1_set_ms>:

void lptim1_set_ms(LPTIM_TypeDef* timer, uint32_t period_ms)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    // Set Auto-Reload value for desired period (assuming 1ms tick from prescaler)
    LPTIM1->ARR = period_ms - 1;
 800160a:	4a06      	ldr	r2, [pc, #24]	@ (8001624 <lptim1_set_ms+0x24>)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	6193      	str	r3, [r2, #24]

    LPTIM1->CMP = 0;
 8001612:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <lptim1_set_ms+0x24>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40007c00 	.word	0x40007c00

08001628 <lsm6dsl_init>:
#include "i2c.h"
#include <stdio.h>

uint8_t who_am_i = LSM6DSL_WHO_AM_I;

void lsm6dsl_init() {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
    uint8_t return_value = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
    uint8_t check_value = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	717b      	strb	r3, [r7, #5]

    // Send WHO_AM_I register address
    return_value = i2c_transaction(LSM6DSL_I2C_ADDR, 0, &who_am_i, 1);
 8001636:	2301      	movs	r3, #1
 8001638:	4a1d      	ldr	r2, [pc, #116]	@ (80016b0 <lsm6dsl_init+0x88>)
 800163a:	2100      	movs	r1, #0
 800163c:	206a      	movs	r0, #106	@ 0x6a
 800163e:	f7ff fe07 	bl	8001250 <i2c_transaction>
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
    if (return_value != 1) {
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d128      	bne.n	800169e <lsm6dsl_init+0x76>
        return;
    }

    // Read WHO_AM_I register value
    return_value = i2c_transaction(LSM6DSL_I2C_ADDR, 1, &check_value, 1);
 800164c:	1d7a      	adds	r2, r7, #5
 800164e:	2301      	movs	r3, #1
 8001650:	2101      	movs	r1, #1
 8001652:	206a      	movs	r0, #106	@ 0x6a
 8001654:	f7ff fdfc 	bl	8001250 <i2c_transaction>
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
    if (return_value != 1) {
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d11f      	bne.n	80016a2 <lsm6dsl_init+0x7a>

    uint8_t config_data[2];  // Buffer to store register address and value
    uint8_t ret;             // Variable to store return status of I2C transactions

    // Configure accelerometer control register (CTRL1_XL)
    config_data[0] = LSM6DSL_CTRL1_XL;  // Register address
 8001662:	2310      	movs	r3, #16
 8001664:	703b      	strb	r3, [r7, #0]
    config_data[1] = CTRL1_XL_CONFIG;   // Configuration value
 8001666:	2350      	movs	r3, #80	@ 0x50
 8001668:	707b      	strb	r3, [r7, #1]

    // Send configuration to the LSM6DSL sensor via I2C
    ret = i2c_transaction(LSM6DSL_I2C_ADDR, 0, config_data, 2);
 800166a:	463a      	mov	r2, r7
 800166c:	2302      	movs	r3, #2
 800166e:	2100      	movs	r1, #0
 8001670:	206a      	movs	r0, #106	@ 0x6a
 8001672:	f7ff fded 	bl	8001250 <i2c_transaction>
 8001676:	4603      	mov	r3, r0
 8001678:	71bb      	strb	r3, [r7, #6]
    if (ret != 1) {
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d112      	bne.n	80016a6 <lsm6dsl_init+0x7e>
        return;
    }

    // Configure INT1_CTRL register
    config_data[0] = LSM6DSL_INT1_CTRL;  // Register address
 8001680:	230d      	movs	r3, #13
 8001682:	703b      	strb	r3, [r7, #0]
    config_data[1] = INT1_CTRL_CONFIG;   // Configuration value
 8001684:	2301      	movs	r3, #1
 8001686:	707b      	strb	r3, [r7, #1]

    // Send INT1_CTRL configuration to the sensor
    ret = i2c_transaction(LSM6DSL_I2C_ADDR, 0, config_data, 2);
 8001688:	463a      	mov	r2, r7
 800168a:	2302      	movs	r3, #2
 800168c:	2100      	movs	r1, #0
 800168e:	206a      	movs	r0, #106	@ 0x6a
 8001690:	f7ff fdde 	bl	8001250 <i2c_transaction>
 8001694:	4603      	mov	r3, r0
 8001696:	71bb      	strb	r3, [r7, #6]
    if (ret != 1) {
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	2b01      	cmp	r3, #1
 800169c:	e004      	b.n	80016a8 <lsm6dsl_init+0x80>
        return;
 800169e:	bf00      	nop
 80016a0:	e002      	b.n	80016a8 <lsm6dsl_init+0x80>
        return;
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <lsm6dsl_init+0x80>
        return;
 80016a6:	bf00      	nop
        return;
    }
}
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000014c 	.word	0x2000014c
 80016b4:	00000000 	.word	0x00000000

080016b8 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
    uint8_t reg_address = LSM6DSL_OUTX_L_XL;
 80016c4:	2328      	movs	r3, #40	@ 0x28
 80016c6:	75fb      	strb	r3, [r7, #23]
    uint8_t data[6];  // Buffer for raw acceleration data

    // Step 1: Write register address and read 6 bytes in one transaction
    if (i2c_transaction(LSM6DSL_I2C_ADDR, 0, &reg_address, 1) == 0) {
 80016c8:	f107 0217 	add.w	r2, r7, #23
 80016cc:	2301      	movs	r3, #1
 80016ce:	2100      	movs	r1, #0
 80016d0:	206a      	movs	r0, #106	@ 0x6a
 80016d2:	f7ff fdbd 	bl	8001250 <i2c_transaction>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d055      	beq.n	8001788 <lsm6dsl_read_xyz+0xd0>
        return;
    }

    if (i2c_transaction(LSM6DSL_I2C_ADDR, 1, data, 6) == 0) {
 80016dc:	f107 0210 	add.w	r2, r7, #16
 80016e0:	2306      	movs	r3, #6
 80016e2:	2101      	movs	r1, #1
 80016e4:	206a      	movs	r0, #106	@ 0x6a
 80016e6:	f7ff fdb3 	bl	8001250 <i2c_transaction>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d04d      	beq.n	800178c <lsm6dsl_read_xyz+0xd4>
        return;
    }

    // Step 2: Combine LSB and MSB into signed 16-bit integers
    *x = (int16_t)((data[1] << 8) | data[0]) * SENS2G;
 80016f0:	7c7b      	ldrb	r3, [r7, #17]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	7c3b      	ldrb	r3, [r7, #16]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f83a 	bl	8000778 <__aeabi_i2d>
 8001704:	a324      	add	r3, pc, #144	@ (adr r3, 8001798 <lsm6dsl_read_xyz+0xe0>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe fdb9 	bl	8000280 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f899 	bl	800084c <__aeabi_d2iz>
 800171a:	4603      	mov	r3, r0
 800171c:	b21a      	sxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]) * SENS2G;
 8001722:	7cfb      	ldrb	r3, [r7, #19]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b21a      	sxth	r2, r3
 8001728:	7cbb      	ldrb	r3, [r7, #18]
 800172a:	b21b      	sxth	r3, r3
 800172c:	4313      	orrs	r3, r2
 800172e:	b21b      	sxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff f821 	bl	8000778 <__aeabi_i2d>
 8001736:	a318      	add	r3, pc, #96	@ (adr r3, 8001798 <lsm6dsl_read_xyz+0xe0>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe fda0 	bl	8000280 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff f880 	bl	800084c <__aeabi_d2iz>
 800174c:	4603      	mov	r3, r0
 800174e:	b21a      	sxth	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]) * SENS2G;
 8001754:	7d7b      	ldrb	r3, [r7, #21]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b21a      	sxth	r2, r3
 800175a:	7d3b      	ldrb	r3, [r7, #20]
 800175c:	b21b      	sxth	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	b21b      	sxth	r3, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f808 	bl	8000778 <__aeabi_i2d>
 8001768:	a30b      	add	r3, pc, #44	@ (adr r3, 8001798 <lsm6dsl_read_xyz+0xe0>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe fd87 	bl	8000280 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f867 	bl	800084c <__aeabi_d2iz>
 800177e:	4603      	mov	r3, r0
 8001780:	b21a      	sxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	801a      	strh	r2, [r3, #0]
 8001786:	e002      	b.n	800178e <lsm6dsl_read_xyz+0xd6>
        return;
 8001788:	bf00      	nop
 800178a:	e000      	b.n	800178e <lsm6dsl_read_xyz+0xd6>
        return;
 800178c:	bf00      	nop
}
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	f3af 8000 	nop.w
 8001798:	5a1cac08 	.word	0x5a1cac08
 800179c:	3faf3b64 	.word	0x3faf3b64

080017a0 <__NVIC_SetPriority>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	@ (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	@ (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <isMoving>:
enum state currentState = FOUND;

int16_t x_prev = 0, y_prev = 0, z_prev = 0;

// Function to detect movement
int isMoving() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
    int16_t x, y, z;
    lsm6dsl_read_xyz(&x, &y, &z);
 80017fa:	1d3a      	adds	r2, r7, #4
 80017fc:	1db9      	adds	r1, r7, #6
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff58 	bl	80016b8 <lsm6dsl_read_xyz>

    int16_t x_diff = abs(x - x_prev);
 8001808:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800180c:	461a      	mov	r2, r3
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <isMoving+0x9c>)
 8001810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	bfb8      	it	lt
 800181a:	425b      	neglt	r3, r3
 800181c:	81fb      	strh	r3, [r7, #14]
    int16_t y_diff = abs(y - y_prev);
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001822:	461a      	mov	r2, r3
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <isMoving+0xa0>)
 8001826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	bfb8      	it	lt
 8001830:	425b      	neglt	r3, r3
 8001832:	81bb      	strh	r3, [r7, #12]
    int16_t z_diff = abs(z - z_prev);
 8001834:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001838:	461a      	mov	r2, r3
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <isMoving+0xa4>)
 800183c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	bfb8      	it	lt
 8001846:	425b      	neglt	r3, r3
 8001848:	817b      	strh	r3, [r7, #10]

    x_prev = x;
 800184a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <isMoving+0x9c>)
 8001850:	801a      	strh	r2, [r3, #0]
    y_prev = y;
 8001852:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <isMoving+0xa0>)
 8001858:	801a      	strh	r2, [r3, #0]
    z_prev = z;
 800185a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <isMoving+0xa4>)
 8001860:	801a      	strh	r2, [r3, #0]

    return (x_diff > 500 || y_diff > 500 || z_diff > 500);
 8001862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001866:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800186a:	dc09      	bgt.n	8001880 <isMoving+0x8c>
 800186c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001870:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001874:	dc04      	bgt.n	8001880 <isMoving+0x8c>
 8001876:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800187a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800187e:	dd01      	ble.n	8001884 <isMoving+0x90>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <isMoving+0x92>
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000035e 	.word	0x2000035e
 8001894:	20000360 	.word	0x20000360
 8001898:	20000362 	.word	0x20000362

0800189c <sendLostMessage>:
    return len;
}


// Send BLE lost message
void sendLostMessage() {
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	@ 0x28
 80018a0:	af02      	add	r7, sp, #8
    unsigned char message[30]; // Adjust size as necessary
    snprintf((char*)message, sizeof(message), "IMLOSIN %lus missing", lost_seconds_counter * 10);
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <sendLostMessage+0x40>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4638      	mov	r0, r7
 80018b0:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <sendLostMessage+0x44>)
 80018b2:	211e      	movs	r1, #30
 80018b4:	f002 fbbc 	bl	8004030 <sniprintf>
    updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen((char*)message), message);
 80018b8:	463b      	mov	r3, r7
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fc88 	bl	80001d0 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	463b      	mov	r3, r7
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4613      	mov	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	4905      	ldr	r1, [pc, #20]	@ (80018e4 <sendLostMessage+0x48>)
 80018ce:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <sendLostMessage+0x4c>)
 80018d0:	f7ff fb86 	bl	8000fe0 <updateCharValue>
}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000358 	.word	0x20000358
 80018e0:	0800487c 	.word	0x0800487c
 80018e4:	200002dc 	.word	0x200002dc
 80018e8:	200002d4 	.word	0x200002d4

080018ec <LPTIM1_IRQHandler>:


// LPTIM1 Interrupt Handler (Runs every 10000ms)
void LPTIM1_IRQHandler(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
    if (LPTIM1->ISR & LPTIM_ISR_ARRM) { // Check if autoreload match occurred
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <LPTIM1_IRQHandler+0x84>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d036      	beq.n	800196a <LPTIM1_IRQHandler+0x7e>
    	LPTIM1->ICR |= LPTIM_ICR_ARRMCF; // Clear the interrupt flag
 80018fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <LPTIM1_IRQHandler+0x84>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a1b      	ldr	r2, [pc, #108]	@ (8001970 <LPTIM1_IRQHandler+0x84>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	6053      	str	r3, [r2, #4]

        // Toggle LEDs every 10 seconds
        // GPIOA->ODR ^= GPIO_ODR_OD5;  // Toggle LED 1 (PA5)
        // GPIOB->ODR ^= GPIO_ODR_OD14; // Toggle LED 2 (PB14)

        if (currentState == FOUND) {
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <LPTIM1_IRQHandler+0x88>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d115      	bne.n	800193c <LPTIM1_IRQHandler+0x50>
            inactivity_counter++;
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <LPTIM1_IRQHandler+0x8c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	4a18      	ldr	r2, [pc, #96]	@ (8001978 <LPTIM1_IRQHandler+0x8c>)
 8001918:	6013      	str	r3, [r2, #0]
            if (inactivity_counter >= LOST_MODE_THRESHOLD) {
 800191a:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <LPTIM1_IRQHandler+0x8c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b05      	cmp	r3, #5
 8001920:	d923      	bls.n	800196a <LPTIM1_IRQHandler+0x7e>
                currentState = LOST;
 8001922:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <LPTIM1_IRQHandler+0x88>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
                lost_mode_triggered = 1;  // First BLE message immediately
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <LPTIM1_IRQHandler+0x90>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
                message_counter = 0;
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <LPTIM1_IRQHandler+0x94>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
                lost_seconds_counter = 0;  // Reset lost seconds counter
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <LPTIM1_IRQHandler+0x98>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
                message_counter = 0;
            }
        }
        //LPTIM1->CR |= LPTIM_CR_CNTSTRT;
    }
}
 800193a:	e016      	b.n	800196a <LPTIM1_IRQHandler+0x7e>
        } else if (currentState == LOST) {
 800193c:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <LPTIM1_IRQHandler+0x88>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d112      	bne.n	800196a <LPTIM1_IRQHandler+0x7e>
            lost_seconds_counter++; // Increment seconds counter in LOST mode
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <LPTIM1_IRQHandler+0x98>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <LPTIM1_IRQHandler+0x98>)
 800194c:	6013      	str	r3, [r2, #0]
            message_counter++;
 800194e:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <LPTIM1_IRQHandler+0x94>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <LPTIM1_IRQHandler+0x94>)
 8001956:	6013      	str	r3, [r2, #0]
            if (message_counter >= MESSAGE_SEND_INTERVAL) {
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <LPTIM1_IRQHandler+0x94>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <LPTIM1_IRQHandler+0x7e>
                sendLostMessage();
 8001960:	f7ff ff9c 	bl	800189c <sendLostMessage>
                message_counter = 0;
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <LPTIM1_IRQHandler+0x94>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40007c00 	.word	0x40007c00
 8001974:	2000035c 	.word	0x2000035c
 8001978:	2000034c 	.word	0x2000034c
 800197c:	20000354 	.word	0x20000354
 8001980:	20000350 	.word	0x20000350
 8001984:	20000358 	.word	0x20000358

08001988 <handleState>:

uint8_t nonDiscoverable = 0; // FOUND

// Handle state transitions
void handleState() {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
    if (isMoving()) {
 800198c:	f7ff ff32 	bl	80017f4 <isMoving>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d011      	beq.n	80019ba <handleState+0x32>
        inactivity_counter = 0;
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <handleState+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
        if (currentState == LOST) {
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <handleState+0x5c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d10a      	bne.n	80019ba <handleState+0x32>
            currentState = FOUND;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <handleState+0x5c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
            disconnectBLE();
 80019aa:	f7ff fb6d 	bl	8001088 <disconnectBLE>
            setDiscoverability(0);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff fbc2 	bl	8001138 <setDiscoverability>
            lost_mode_triggered = 0;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <handleState+0x60>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
        }
    }

    if (currentState == LOST && lost_mode_triggered) {
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <handleState+0x5c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d10c      	bne.n	80019dc <handleState+0x54>
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <handleState+0x60>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <handleState+0x54>
        sendLostMessage();
 80019cc:	f7ff ff66 	bl	800189c <sendLostMessage>
        setDiscoverability(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fbb1 	bl	8001138 <setDiscoverability>
        lost_mode_triggered = 0;
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <handleState+0x60>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
    }
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000034c 	.word	0x2000034c
 80019e4:	2000035c 	.word	0x2000035c
 80019e8:	20000354 	.word	0x20000354

080019ec <main>:

int main(void) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
    HAL_Init();
 80019f0:	f000 fad9 	bl	8001fa6 <HAL_Init>
    SystemClock_Config();
 80019f4:	f000 f886 	bl	8001b04 <SystemClock_Config>

    i2c_init();
 80019f8:	f7ff fbc4 	bl	8001184 <i2c_init>
    lsm6dsl_init();
 80019fc:	f7ff fe14 	bl	8001628 <lsm6dsl_init>
    leds_init();
 8001a00:	f7ff fce6 	bl	80013d0 <leds_init>
    lptim1_init(LPTIM1);
 8001a04:	4838      	ldr	r0, [pc, #224]	@ (8001ae8 <main+0xfc>)
 8001a06:	f7ff fd97 	bl	8001538 <lptim1_init>

    lptim1_set_ms(LPTIM1, 20000);
 8001a0a:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001a0e:	4836      	ldr	r0, [pc, #216]	@ (8001ae8 <main+0xfc>)
 8001a10:	f7ff fdf6 	bl	8001600 <lptim1_set_ms>

    // Enable LPTIM1 interrupt in NVIC
    //LPTIM1_IRQHandler();
    NVIC_SetPriority(LPTIM1_IRQn, 1);
 8001a14:	2101      	movs	r1, #1
 8001a16:	2041      	movs	r0, #65	@ 0x41
 8001a18:	f7ff fec2 	bl	80017a0 <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001a1c:	2041      	movs	r0, #65	@ 0x41
 8001a1e:	f000 fc72 	bl	8002306 <HAL_NVIC_EnableIRQ>

    MX_GPIO_Init();
 8001a22:	f000 f8f3 	bl	8001c0c <MX_GPIO_Init>
    MX_SPI3_Init();
 8001a26:	f000 f8b3 	bl	8001b90 <MX_SPI3_Init>

    // Reset BLE module
    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a34:	f000 fe44 	bl	80026c0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001a38:	200a      	movs	r0, #10
 8001a3a:	f000 fb29 	bl	8002090 <HAL_Delay>
    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a48:	f000 fe3a 	bl	80026c0 <HAL_GPIO_WritePin>

    ble_init();
 8001a4c:	f7fe ff26 	bl	800089c <ble_init>
    HAL_Delay(10);
 8001a50:	200a      	movs	r0, #10
 8001a52:	f000 fb1d 	bl	8002090 <HAL_Delay>
    setDiscoverability(0);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fb6e 	bl	8001138 <setDiscoverability>

    while (1) {
        handleState();
 8001a5c:	f7ff ff94 	bl	8001988 <handleState>

             if (currentState == FOUND) {
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <main+0x100>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d131      	bne.n	8001acc <main+0xe0>
            	 // Disable all peripherals on APB1 (except I2C2 and TIM2)
            	 RCC->APB1ENR1 &= ~(RCC_APB1ENR1_OPAMPEN | RCC_APB1ENR1_DAC1EN | RCC_APB1ENR1_TIM2EN |
 8001a68:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <main+0x104>)
 8001a6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a6c:	4920      	ldr	r1, [pc, #128]	@ (8001af0 <main+0x104>)
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <main+0x108>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	658b      	str	r3, [r1, #88]	@ 0x58
            	                    RCC_APB1ENR1_WWDGEN | RCC_APB1ENR1_TIM7EN | RCC_APB1ENR1_TIM6EN |
            	                    RCC_APB1ENR1_TIM5EN | RCC_APB1ENR1_TIM4EN | RCC_APB1ENR1_TIM3EN);

            	 //standbyBle();

            	 RCC->APB1ENR2 = 0;
 8001a74:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <main+0x104>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	65da      	str	r2, [r3, #92]	@ 0x5c
            	 RCC->APB2ENR = 0;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <main+0x104>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	661a      	str	r2, [r3, #96]	@ 0x60
            	 RCC->AHB2ENR = 0;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <main+0x104>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	64da      	str	r2, [r3, #76]	@ 0x4c

            	 // Disable I2C clock
            	 RCC->APB1ENR1 &= ~RCC_APB1ENR1_I2C2EN;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <main+0x104>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	4a19      	ldr	r2, [pc, #100]	@ (8001af0 <main+0x104>)
 8001a8c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a90:	6593      	str	r3, [r2, #88]	@ 0x58

            	 // Disable SPI clock
            	 RCC->APB1ENR1 &= ~RCC_APB1ENR1_SPI3EN;
 8001a92:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <main+0x104>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	4a16      	ldr	r2, [pc, #88]	@ (8001af0 <main+0x104>)
 8001a98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001a9c:	6593      	str	r3, [r2, #88]	@ 0x58

                 // If in FOUND state and not performing tasks, enter light sleep mode
            	 SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk; // Enable deep sleep
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <main+0x10c>)
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <main+0x10c>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6113      	str	r3, [r2, #16]

                 HAL_SuspendTick();  // Suspend system tick before sleeping
 8001aaa:	f000 fb15 	bl	80020d8 <HAL_SuspendTick>
                 __WFI();            // Wait for interrupt (enters sleep mode)
 8001aae:	bf30      	wfi
                 HAL_ResumeTick();   // Resume system tick after waking up
 8001ab0:	f000 fb22 	bl	80020f8 <HAL_ResumeTick>

                 // Re-enable peripheral clocks after waking up
                 RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C2EN | RCC_APB1ENR1_SPI3EN);
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <main+0x104>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <main+0x104>)
 8001aba:	f443 0381 	orr.w	r3, r3, #4227072	@ 0x408000
 8001abe:	6593      	str	r3, [r2, #88]	@ 0x58
                 // Re-enable LPTIM1 clock if needed after wake-up
                 //RCC->APB1ENR1 |= RCC_APB1ENR1_LPTIM1EN;
                 //LPTIM1->CR |= LPTIM_CR_ENABLE;  // Ensure it's enabled

                 // Re-enable GPIO clocks
                 RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN |
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <main+0x104>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <main+0x104>)
 8001ac6:	f043 031f 	orr.w	r3, r3, #31
 8001aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
                                  RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIODEN |
                                  RCC_AHB2ENR_GPIOEEN);
             }

        if (!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port, BLE_INT_Pin)) {
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <main+0x110>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1c3      	bne.n	8001a5c <main+0x70>
 8001ad4:	2140      	movs	r1, #64	@ 0x40
 8001ad6:	480a      	ldr	r0, [pc, #40]	@ (8001b00 <main+0x114>)
 8001ad8:	f000 fdda 	bl	8002690 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0bc      	beq.n	8001a5c <main+0x70>
            catchBLE();
 8001ae2:	f7ff f8f1 	bl	8000cc8 <catchBLE>
        handleState();
 8001ae6:	e7b9      	b.n	8001a5c <main+0x70>
 8001ae8:	40007c00 	.word	0x40007c00
 8001aec:	2000035c 	.word	0x2000035c
 8001af0:	40021000 	.word	0x40021000
 8001af4:	8d41b7c0 	.word	0x8d41b7c0
 8001af8:	e000ed00 	.word	0xe000ed00
 8001afc:	20000364 	.word	0x20000364
 8001b00:	48001000 	.word	0x48001000

08001b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b096      	sub	sp, #88	@ 0x58
 8001b08:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	2244      	movs	r2, #68	@ 0x44
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 facc 	bl	80040b0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8001b26:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b2a:	f000 fe13 	bl	8002754 <HAL_PWREx_ControlVoltageScaling>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0x34>
        Error_Handler();
 8001b34:	f000 f902 	bl	8001d3c <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
      * in the RCC_OscInitTypeDef structure.
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b38:	2310      	movs	r3, #16
 8001b3a:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
    // This line changes system clock frequency
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001b44:	2370      	movs	r3, #112	@ 0x70
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fe55 	bl	8002800 <HAL_RCC_OscConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0x5c>
        Error_Handler();
 8001b5c:	f000 f8ee 	bl	8001d3c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001b60:	230f      	movs	r3, #15
 8001b62:	603b      	str	r3, [r7, #0]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001b74:	463b      	mov	r3, r7
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fa1d 	bl	8002fb8 <HAL_RCC_ClockConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0x84>
        Error_Handler();
 8001b84:	f000 f8da 	bl	8001d3c <Error_Handler>
    }
}
 8001b88:	bf00      	nop
 8001b8a:	3758      	adds	r7, #88	@ 0x58
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <MX_SPI3_Init>:
/**
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
    /* USER CODE END SPI3_Init 0 */

    /* USER CODE BEGIN SPI3_Init 1 */
    /* USER CODE END SPI3_Init 1 */
    /* SPI3 parameter configuration */
    hspi3.Instance = SPI3;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <MX_SPI3_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001b9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ba0:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001baa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001bae:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc2:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi3.Init.CRCPolynomial = 7;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bde:	2207      	movs	r2, #7
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bea:	2208      	movs	r2, #8
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001bee:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <MX_SPI3_Init+0x74>)
 8001bf0:	f001 fbce 	bl	8003390 <HAL_SPI_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_SPI3_Init+0x6e>
        Error_Handler();
 8001bfa:	f000 f89f 	bl	8001d3c <Error_Handler>
    }
    /* USER CODE BEGIN SPI3_Init 2 */
    /* USER CODE END SPI3_Init 2 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200002e8 	.word	0x200002e8
 8001c08:	40003c00 	.word	0x40003c00

08001c0c <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]

    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c22:	4b43      	ldr	r3, [pc, #268]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	4a42      	ldr	r2, [pc, #264]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c28:	f043 0310 	orr.w	r3, r3, #16
 8001c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2e:	4b40      	ldr	r3, [pc, #256]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c46:	4b3a      	ldr	r3, [pc, #232]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4b37      	ldr	r3, [pc, #220]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	4a36      	ldr	r2, [pc, #216]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5e:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6a:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	4a30      	ldr	r2, [pc, #192]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c76:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c82:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	4a2a      	ldr	r2, [pc, #168]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8e:	4b28      	ldr	r3, [pc, #160]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2120      	movs	r1, #32
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca2:	f000 fd0d 	bl	80026c0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cac:	4821      	ldr	r0, [pc, #132]	@ (8001d34 <MX_GPIO_Init+0x128>)
 8001cae:	f000 fd07 	bl	80026c0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cbc:	f000 fd00 	bl	80026c0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : BLE_INT_Pin */
    GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001cc0:	2340      	movs	r3, #64	@ 0x40
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4818      	ldr	r0, [pc, #96]	@ (8001d38 <MX_GPIO_Init+0x12c>)
 8001cd6:	f000 fb31 	bl	800233c <HAL_GPIO_Init>

    /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
    GPIO_InitStruct.Pin = GPIO_LED1_Pin | BLE_RESET_Pin;
 8001cda:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf6:	f000 fb21 	bl	800233c <HAL_GPIO_Init>

    /*Configure GPIO pin : BLE_CS_Pin */
    GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001cfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4808      	ldr	r0, [pc, #32]	@ (8001d34 <MX_GPIO_Init+0x128>)
 8001d14:	f000 fb12 	bl	800233c <HAL_GPIO_Init>

    /* EXTI interrupt init */
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2017      	movs	r0, #23
 8001d1e:	f000 fad6 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d22:	2017      	movs	r0, #23
 8001d24:	f000 faef 	bl	8002306 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	@ 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000c00 	.word	0x48000c00
 8001d38:	48001000 	.word	0x48001000

08001d3c <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <Error_Handler+0x8>

08001d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <HAL_MspInit+0x44>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	4a0e      	ldr	r2, [pc, #56]	@ (8001d8c <HAL_MspInit+0x44>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <HAL_MspInit+0x44>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_MspInit+0x44>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	4a08      	ldr	r2, [pc, #32]	@ (8001d8c <HAL_MspInit+0x44>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_MspInit+0x44>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000

08001d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <HAL_SPI_MspInit+0x7c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d128      	bne.n	8001e04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	4a16      	ldr	r2, [pc, #88]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_SPI_MspInit+0x80>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001de2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001df4:	2306      	movs	r3, #6
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <HAL_SPI_MspInit+0x84>)
 8001e00:	f000 fa9c 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	@ 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40003c00 	.word	0x40003c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000800 	.word	0x48000800

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <NMI_Handler+0x4>

08001e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <MemManage_Handler+0x4>

08001e30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6e:	f000 f8ef 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <EXTI9_5_IRQHandler+0x14>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001e82:	2040      	movs	r0, #64	@ 0x40
 8001e84:	f000 fc34 	bl	80026f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200002e4 	.word	0x200002e4

08001e90 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <_sbrk+0x50>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x16>
		heap_end = &end;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <_sbrk+0x50>)
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <_sbrk+0x54>)
 8001ea4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <_sbrk+0x50>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <_sbrk+0x50>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	466a      	mov	r2, sp
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d907      	bls.n	8001eca <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001eba:	f002 f911 	bl	80040e0 <__errno>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	220c      	movs	r2, #12
 8001ec2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ec8:	e006      	b.n	8001ed8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001eca:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <_sbrk+0x50>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a03      	ldr	r2, [pc, #12]	@ (8001ee0 <_sbrk+0x50>)
 8001ed4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000368 	.word	0x20000368
 8001ee4:	200004b8 	.word	0x200004b8

08001ee8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <SystemInit+0x64>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef2:	4a16      	ldr	r2, [pc, #88]	@ (8001f4c <SystemInit+0x64>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <SystemInit+0x68>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <SystemInit+0x68>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <SystemInit+0x68>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <SystemInit+0x68>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <SystemInit+0x68>)
 8001f14:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001f18:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <SystemInit+0x68>)
 8001f20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <SystemInit+0x68>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <SystemInit+0x68>)
 8001f2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <SystemInit+0x68>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <SystemInit+0x64>)
 8001f3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f3e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00
 8001f50:	40021000 	.word	0x40021000

08001f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f58:	f7ff ffc6 	bl	8001ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f5e:	490d      	ldr	r1, [pc, #52]	@ (8001f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f60:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <LoopForever+0xe>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f74:	4c0a      	ldr	r4, [pc, #40]	@ (8001fa0 <LoopForever+0x16>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f82:	f002 f8b3 	bl	80040ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f86:	f7ff fd31 	bl	80019ec <main>

08001f8a <LoopForever>:

LoopForever:
    b LoopForever
 8001f8a:	e7fe      	b.n	8001f8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8001f98:	08004918 	.word	0x08004918
  ldr r2, =_sbss
 8001f9c:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001fa0:	200004b8 	.word	0x200004b8

08001fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC1_2_IRQHandler>

08001fa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 f981 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 f80e 	bl	8001fd8 <HAL_InitTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	e001      	b.n	8001fcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fc8:	f7ff febe 	bl	8001d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fe4:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <HAL_InitTick+0x6c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d023      	beq.n	8002034 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <HAL_InitTick+0x70>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <HAL_InitTick+0x6c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f98d 	bl	8002322 <HAL_SYSTICK_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10f      	bne.n	800202e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d809      	bhi.n	8002028 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800201c:	f000 f957 	bl	80022ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002020:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_InitTick+0x74>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e007      	b.n	8002038 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e004      	b.n	8002038 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e001      	b.n	8002038 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000158 	.word	0x20000158
 8002048:	20000150 	.word	0x20000150
 800204c:	20000154 	.word	0x20000154

08002050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_IncTick+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <HAL_IncTick+0x24>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000158 	.word	0x20000158
 8002074:	2000036c 	.word	0x2000036c

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	2000036c 	.word	0x2000036c

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff ffee 	bl	8002078 <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020a8:	d005      	beq.n	80020b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_Delay+0x44>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b6:	bf00      	nop
 80020b8:	f7ff ffde 	bl	8002078 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d8f7      	bhi.n	80020b8 <HAL_Delay+0x28>
  {
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000158 	.word	0x20000158

080020d8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80020dc:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_SuspendTick+0x1c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <HAL_SuspendTick+0x1c>)
 80020e2:	f023 0302 	bic.w	r3, r3, #2
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_ResumeTick+0x1c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_ResumeTick+0x1c>)
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <__NVIC_SetPriorityGrouping>:
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	@ (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	@ (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	@ (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	@ (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff3e 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff8e 	bl	800220c <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff31 	bl	800217c <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234a:	e17f      	b.n	800264c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8171 	beq.w	8002646 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d005      	beq.n	800237c <HAL_GPIO_Init+0x40>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d130      	bne.n	80023de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b2:	2201      	movs	r2, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0201 	and.w	r2, r3, #1
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d118      	bne.n	800241c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023f0:	2201      	movs	r2, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f003 0201 	and.w	r2, r3, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b03      	cmp	r3, #3
 8002426:	d017      	beq.n	8002458 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d123      	bne.n	80024ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	08da      	lsrs	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3208      	adds	r2, #8
 800246c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	220f      	movs	r2, #15
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	08da      	lsrs	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3208      	adds	r2, #8
 80024a6:	6939      	ldr	r1, [r7, #16]
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80ac 	beq.w	8002646 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ee:	4b5f      	ldr	r3, [pc, #380]	@ (800266c <HAL_GPIO_Init+0x330>)
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	4a5e      	ldr	r2, [pc, #376]	@ (800266c <HAL_GPIO_Init+0x330>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80024fa:	4b5c      	ldr	r3, [pc, #368]	@ (800266c <HAL_GPIO_Init+0x330>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002506:	4a5a      	ldr	r2, [pc, #360]	@ (8002670 <HAL_GPIO_Init+0x334>)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002530:	d025      	beq.n	800257e <HAL_GPIO_Init+0x242>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4f      	ldr	r2, [pc, #316]	@ (8002674 <HAL_GPIO_Init+0x338>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01f      	beq.n	800257a <HAL_GPIO_Init+0x23e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4e      	ldr	r2, [pc, #312]	@ (8002678 <HAL_GPIO_Init+0x33c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d019      	beq.n	8002576 <HAL_GPIO_Init+0x23a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4d      	ldr	r2, [pc, #308]	@ (800267c <HAL_GPIO_Init+0x340>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_Init+0x236>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4c      	ldr	r2, [pc, #304]	@ (8002680 <HAL_GPIO_Init+0x344>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00d      	beq.n	800256e <HAL_GPIO_Init+0x232>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4b      	ldr	r2, [pc, #300]	@ (8002684 <HAL_GPIO_Init+0x348>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_Init+0x22e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4a      	ldr	r2, [pc, #296]	@ (8002688 <HAL_GPIO_Init+0x34c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_GPIO_Init+0x22a>
 8002562:	2306      	movs	r3, #6
 8002564:	e00c      	b.n	8002580 <HAL_GPIO_Init+0x244>
 8002566:	2307      	movs	r3, #7
 8002568:	e00a      	b.n	8002580 <HAL_GPIO_Init+0x244>
 800256a:	2305      	movs	r3, #5
 800256c:	e008      	b.n	8002580 <HAL_GPIO_Init+0x244>
 800256e:	2304      	movs	r3, #4
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x244>
 8002572:	2303      	movs	r3, #3
 8002574:	e004      	b.n	8002580 <HAL_GPIO_Init+0x244>
 8002576:	2302      	movs	r3, #2
 8002578:	e002      	b.n	8002580 <HAL_GPIO_Init+0x244>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x244>
 800257e:	2300      	movs	r3, #0
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	f002 0203 	and.w	r2, r2, #3
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	4093      	lsls	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002590:	4937      	ldr	r1, [pc, #220]	@ (8002670 <HAL_GPIO_Init+0x334>)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3302      	adds	r3, #2
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800259e:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <HAL_GPIO_Init+0x350>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025c2:	4a32      	ldr	r2, [pc, #200]	@ (800268c <HAL_GPIO_Init+0x350>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025c8:	4b30      	ldr	r3, [pc, #192]	@ (800268c <HAL_GPIO_Init+0x350>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ec:	4a27      	ldr	r2, [pc, #156]	@ (800268c <HAL_GPIO_Init+0x350>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025f2:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_GPIO_Init+0x350>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002616:	4a1d      	ldr	r2, [pc, #116]	@ (800268c <HAL_GPIO_Init+0x350>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <HAL_GPIO_Init+0x350>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002640:	4a12      	ldr	r2, [pc, #72]	@ (800268c <HAL_GPIO_Init+0x350>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	f47f ae78 	bne.w	800234c <HAL_GPIO_Init+0x10>
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	40010000 	.word	0x40010000
 8002674:	48000400 	.word	0x48000400
 8002678:	48000800 	.word	0x48000800
 800267c:	48000c00 	.word	0x48000c00
 8002680:	48001000 	.word	0x48001000
 8002684:	48001400 	.word	0x48001400
 8002688:	48001800 	.word	0x48001800
 800268c:	40010400 	.word	0x40010400

08002690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e001      	b.n	80026b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026fa:	4b08      	ldr	r3, [pc, #32]	@ (800271c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d006      	beq.n	8002714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002706:	4a05      	ldr	r2, [pc, #20]	@ (800271c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f806 	bl	8002720 <HAL_GPIO_EXTI_Callback>
  }
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40010400 	.word	0x40010400

08002720 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <HAL_PWREx_GetVoltageRange+0x18>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40007000 	.word	0x40007000

08002754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002762:	d130      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002764:	4b23      	ldr	r3, [pc, #140]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800276c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002770:	d038      	beq.n	80027e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002772:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800277a:	4a1e      	ldr	r2, [pc, #120]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002782:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2232      	movs	r2, #50	@ 0x32
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0c9b      	lsrs	r3, r3, #18
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002798:	e002      	b.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3b01      	subs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ac:	d102      	bne.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f2      	bne.n	800279a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027b4:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027c0:	d110      	bne.n	80027e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e00f      	b.n	80027e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027c6:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027d2:	d007      	beq.n	80027e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027d4:	4b07      	ldr	r3, [pc, #28]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027dc:	4a05      	ldr	r2, [pc, #20]	@ (80027f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40007000 	.word	0x40007000
 80027f8:	20000150 	.word	0x20000150
 80027fc:	431bde83 	.word	0x431bde83

08002800 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e3ca      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002812:	4b97      	ldr	r3, [pc, #604]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800281c:	4b94      	ldr	r3, [pc, #592]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80e4 	beq.w	80029fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <HAL_RCC_OscConfig+0x4a>
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	f040 808b 	bne.w	8002958 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 8087 	bne.w	8002958 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800284a:	4b89      	ldr	r3, [pc, #548]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_RCC_OscConfig+0x62>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e3a2      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	4b82      	ldr	r3, [pc, #520]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <HAL_RCC_OscConfig+0x7c>
 8002872:	4b7f      	ldr	r3, [pc, #508]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800287a:	e005      	b.n	8002888 <HAL_RCC_OscConfig+0x88>
 800287c:	4b7c      	ldr	r3, [pc, #496]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002888:	4293      	cmp	r3, r2
 800288a:	d223      	bcs.n	80028d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd1d 	bl	80032d0 <RCC_SetFlashLatencyFromMSIRange>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e383      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a0:	4b73      	ldr	r3, [pc, #460]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a72      	ldr	r2, [pc, #456]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028a6:	f043 0308 	orr.w	r3, r3, #8
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b70      	ldr	r3, [pc, #448]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	496d      	ldr	r1, [pc, #436]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028be:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	4968      	ldr	r1, [pc, #416]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
 80028d2:	e025      	b.n	8002920 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d4:	4b66      	ldr	r3, [pc, #408]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a65      	ldr	r2, [pc, #404]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028da:	f043 0308 	orr.w	r3, r3, #8
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b63      	ldr	r3, [pc, #396]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4960      	ldr	r1, [pc, #384]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	495b      	ldr	r1, [pc, #364]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fcdd 	bl	80032d0 <RCC_SetFlashLatencyFromMSIRange>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e343      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002920:	f000 fc4a 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b52      	ldr	r3, [pc, #328]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	4950      	ldr	r1, [pc, #320]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	4a4e      	ldr	r2, [pc, #312]	@ (8002a78 <HAL_RCC_OscConfig+0x278>)
 800293e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002940:	4b4e      	ldr	r3, [pc, #312]	@ (8002a7c <HAL_RCC_OscConfig+0x27c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fb47 	bl	8001fd8 <HAL_InitTick>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d052      	beq.n	80029fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	e327      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d032      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002960:	4b43      	ldr	r3, [pc, #268]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a42      	ldr	r2, [pc, #264]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800296c:	f7ff fb84 	bl	8002078 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002974:	f7ff fb80 	bl	8002078 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e310      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002986:	4b3a      	ldr	r3, [pc, #232]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002992:	4b37      	ldr	r3, [pc, #220]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a36      	ldr	r2, [pc, #216]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4931      	ldr	r1, [pc, #196]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	492c      	ldr	r1, [pc, #176]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
 80029c4:	e01a      	b.n	80029fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a29      	ldr	r2, [pc, #164]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029d2:	f7ff fb51 	bl	8002078 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029da:	f7ff fb4d 	bl	8002078 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e2dd      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ec:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x1da>
 80029f8:	e000      	b.n	80029fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d074      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x21a>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d10e      	bne.n	8002a32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d10b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d064      	beq.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d160      	bne.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e2ba      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x24a>
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e026      	b.n	8002a98 <HAL_RCC_OscConfig+0x298>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a52:	d115      	bne.n	8002a80 <HAL_RCC_OscConfig+0x280>
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b03      	ldr	r3, [pc, #12]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a02      	ldr	r2, [pc, #8]	@ (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e014      	b.n	8002a98 <HAL_RCC_OscConfig+0x298>
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08004894 	.word	0x08004894
 8002a78:	20000150 	.word	0x20000150
 8002a7c:	20000154 	.word	0x20000154
 8002a80:	4ba0      	ldr	r3, [pc, #640]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a9f      	ldr	r2, [pc, #636]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b9d      	ldr	r3, [pc, #628]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a9c      	ldr	r2, [pc, #624]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7ff faea 	bl	8002078 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fae6 	bl	8002078 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	@ 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e276      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aba:	4b92      	ldr	r3, [pc, #584]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2a8>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fad6 	bl	8002078 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7ff fad2 	bl	8002078 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	@ 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e262      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae2:	4b88      	ldr	r3, [pc, #544]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x2d0>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d060      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_OscConfig+0x310>
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d119      	bne.n	8002b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d116      	bne.n	8002b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b10:	4b7c      	ldr	r3, [pc, #496]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_OscConfig+0x328>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e23f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b76      	ldr	r3, [pc, #472]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	4973      	ldr	r1, [pc, #460]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3c:	e040      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d023      	beq.n	8002b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b46:	4b6f      	ldr	r3, [pc, #444]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7ff fa91 	bl	8002078 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7ff fa8d 	bl	8002078 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e21d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6c:	4b65      	ldr	r3, [pc, #404]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b62      	ldr	r3, [pc, #392]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	495f      	ldr	r1, [pc, #380]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
 8002b8c:	e018      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5c      	ldr	r2, [pc, #368]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7ff fa6d 	bl	8002078 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7ff fa69 	bl	8002078 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e1f9      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb4:	4b53      	ldr	r3, [pc, #332]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bda:	4a4a      	ldr	r2, [pc, #296]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7ff fa48 	bl	8002078 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7ff fa44 	bl	8002078 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1d4      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bfe:	4b41      	ldr	r3, [pc, #260]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ef      	beq.n	8002bec <HAL_RCC_OscConfig+0x3ec>
 8002c0c:	e01b      	b.n	8002c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c14:	4a3b      	ldr	r2, [pc, #236]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7ff fa2b 	bl	8002078 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c26:	f7ff fa27 	bl	8002078 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1b7      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c38:	4b32      	ldr	r3, [pc, #200]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ef      	bne.n	8002c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80a6 	beq.w	8002da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c58:	4b2a      	ldr	r3, [pc, #168]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10d      	bne.n	8002c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	4a26      	ldr	r2, [pc, #152]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c70:	4b24      	ldr	r3, [pc, #144]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c80:	4b21      	ldr	r3, [pc, #132]	@ (8002d08 <HAL_RCC_OscConfig+0x508>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d118      	bne.n	8002cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_RCC_OscConfig+0x508>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <HAL_RCC_OscConfig+0x508>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c98:	f7ff f9ee 	bl	8002078 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca0:	f7ff f9ea 	bl	8002078 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e17a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_RCC_OscConfig+0x508>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d108      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4d8>
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cd6:	e029      	b.n	8002d2c <HAL_RCC_OscConfig+0x52c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d115      	bne.n	8002d0c <HAL_RCC_OscConfig+0x50c>
 8002ce0:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	4a07      	ldr	r2, [pc, #28]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf6:	4a03      	ldr	r2, [pc, #12]	@ (8002d04 <HAL_RCC_OscConfig+0x504>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x52c>
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	4b9c      	ldr	r3, [pc, #624]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d12:	4a9b      	ldr	r2, [pc, #620]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d1c:	4b98      	ldr	r3, [pc, #608]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d22:	4a97      	ldr	r2, [pc, #604]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d016      	beq.n	8002d62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7ff f9a0 	bl	8002078 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7ff f99c 	bl	8002078 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e12a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d52:	4b8b      	ldr	r3, [pc, #556]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ed      	beq.n	8002d3c <HAL_RCC_OscConfig+0x53c>
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d62:	f7ff f989 	bl	8002078 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7ff f985 	bl	8002078 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e113      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d80:	4b7f      	ldr	r3, [pc, #508]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ed      	bne.n	8002d6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8e:	7ffb      	ldrb	r3, [r7, #31]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b7a      	ldr	r3, [pc, #488]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d98:	4a79      	ldr	r2, [pc, #484]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80fe 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	f040 80d0 	bne.w	8002f54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002db4:	4b72      	ldr	r3, [pc, #456]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d130      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d127      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002df4:	2a07      	cmp	r2, #7
 8002df6:	bf14      	ite	ne
 8002df8:	2201      	movne	r2, #1
 8002dfa:	2200      	moveq	r2, #0
 8002dfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d113      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	3b01      	subs	r3, #1
 8002e24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d06e      	beq.n	8002f08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d069      	beq.n	8002f04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e30:	4b53      	ldr	r3, [pc, #332]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e3c:	4b50      	ldr	r3, [pc, #320]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0ad      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a4b      	ldr	r2, [pc, #300]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e58:	f7ff f90e 	bl	8002078 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7ff f90a 	bl	8002078 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e09a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e72:	4b43      	ldr	r3, [pc, #268]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7e:	4b40      	ldr	r3, [pc, #256]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b40      	ldr	r3, [pc, #256]	@ (8002f84 <HAL_RCC_OscConfig+0x784>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e8e:	3a01      	subs	r2, #1
 8002e90:	0112      	lsls	r2, r2, #4
 8002e92:	4311      	orrs	r1, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e98:	0212      	lsls	r2, r2, #8
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ea0:	0852      	lsrs	r2, r2, #1
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0552      	lsls	r2, r2, #21
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002eac:	0852      	lsrs	r2, r2, #1
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	0652      	lsls	r2, r2, #25
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002eb8:	0912      	lsrs	r2, r2, #4
 8002eba:	0452      	lsls	r2, r2, #17
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	4930      	ldr	r1, [pc, #192]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ece:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002edc:	f7ff f8cc 	bl	8002078 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7ff f8c8 	bl	8002078 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e058      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f02:	e050      	b.n	8002fa6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e04f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f08:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d148      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f14:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a19      	ldr	r2, [pc, #100]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f20:	4b17      	ldr	r3, [pc, #92]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a16      	ldr	r2, [pc, #88]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f2c:	f7ff f8a4 	bl	8002078 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7ff f8a0 	bl	8002078 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e030      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x734>
 8002f52:	e028      	b.n	8002fa6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d023      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a08      	ldr	r2, [pc, #32]	@ (8002f80 <HAL_RCC_OscConfig+0x780>)
 8002f60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7ff f887 	bl	8002078 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6c:	e00c      	b.n	8002f88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7ff f883 	bl	8002078 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d905      	bls.n	8002f88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e013      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
 8002f80:	40021000 	.word	0x40021000
 8002f84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <HAL_RCC_OscConfig+0x7b0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ec      	bne.n	8002f6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_RCC_OscConfig+0x7b0>)
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	4905      	ldr	r1, [pc, #20]	@ (8002fb0 <HAL_RCC_OscConfig+0x7b0>)
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_RCC_OscConfig+0x7b4>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
 8002fa0:	e001      	b.n	8002fa6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	feeefffc 	.word	0xfeeefffc

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0e7      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b75      	ldr	r3, [pc, #468]	@ (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d910      	bls.n	8002ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b72      	ldr	r3, [pc, #456]	@ (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 0207 	bic.w	r2, r3, #7
 8002fe2:	4970      	ldr	r1, [pc, #448]	@ (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b6e      	ldr	r3, [pc, #440]	@ (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cf      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	4b66      	ldr	r3, [pc, #408]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003014:	429a      	cmp	r2, r3
 8003016:	d908      	bls.n	800302a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b63      	ldr	r3, [pc, #396]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4960      	ldr	r1, [pc, #384]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d04c      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303e:	4b5a      	ldr	r3, [pc, #360]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d121      	bne.n	800308e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0a6      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003056:	4b54      	ldr	r3, [pc, #336]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d115      	bne.n	800308e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e09a      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800306e:	4b4e      	ldr	r3, [pc, #312]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e08e      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800307e:	4b4a      	ldr	r3, [pc, #296]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e086      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800308e:	4b46      	ldr	r3, [pc, #280]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4943      	ldr	r1, [pc, #268]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a0:	f7fe ffea 	bl	8002078 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fe ffe6 	bl	8002078 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e06e      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	4b3a      	ldr	r3, [pc, #232]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	4b31      	ldr	r3, [pc, #196]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d208      	bcs.n	80030fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b2e      	ldr	r3, [pc, #184]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	492b      	ldr	r1, [pc, #172]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030fe:	4b29      	ldr	r3, [pc, #164]	@ (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d210      	bcs.n	800312e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310c:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 0207 	bic.w	r2, r3, #7
 8003114:	4923      	ldr	r1, [pc, #140]	@ (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311c:	4b21      	ldr	r3, [pc, #132]	@ (80031a4 <HAL_RCC_ClockConfig+0x1ec>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d001      	beq.n	800312e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e036      	b.n	800319c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313a:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4918      	ldr	r1, [pc, #96]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003158:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4910      	ldr	r1, [pc, #64]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800316c:	f000 f824 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	490b      	ldr	r1, [pc, #44]	@ (80031ac <HAL_RCC_ClockConfig+0x1f4>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	4a09      	ldr	r2, [pc, #36]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f8>)
 800318a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <HAL_RCC_ClockConfig+0x1fc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe ff21 	bl	8001fd8 <HAL_InitTick>
 8003196:	4603      	mov	r3, r0
 8003198:	72fb      	strb	r3, [r7, #11]

  return status;
 800319a:	7afb      	ldrb	r3, [r7, #11]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40022000 	.word	0x40022000
 80031a8:	40021000 	.word	0x40021000
 80031ac:	08004894 	.word	0x08004894
 80031b0:	20000150 	.word	0x20000150
 80031b4:	20000154 	.word	0x20000154

080031b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	@ 0x24
 80031bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c6:	4b3e      	ldr	r3, [pc, #248]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d0:	4b3b      	ldr	r3, [pc, #236]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x34>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d121      	bne.n	800322a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d11e      	bne.n	800322a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031ec:	4b34      	ldr	r3, [pc, #208]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031f8:	4b31      	ldr	r3, [pc, #196]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	e005      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003208:	4b2d      	ldr	r3, [pc, #180]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003214:	4a2b      	ldr	r2, [pc, #172]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10d      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d102      	bne.n	8003236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003230:	4b25      	ldr	r3, [pc, #148]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e004      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d101      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800323c:	4b23      	ldr	r3, [pc, #140]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x114>)
 800323e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d134      	bne.n	80032b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003246:	4b1e      	ldr	r3, [pc, #120]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0xa6>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d003      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0xac>
 800325c:	e005      	b.n	800326a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800325e:	4b1a      	ldr	r3, [pc, #104]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003260:	617b      	str	r3, [r7, #20]
      break;
 8003262:	e005      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003264:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003266:	617b      	str	r3, [r7, #20]
      break;
 8003268:	e002      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	617b      	str	r3, [r7, #20]
      break;
 800326e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003270:	4b13      	ldr	r3, [pc, #76]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	3301      	adds	r3, #1
 800327c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800327e:	4b10      	ldr	r3, [pc, #64]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	fb03 f202 	mul.w	r2, r3, r2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	0e5b      	lsrs	r3, r3, #25
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	3301      	adds	r3, #1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032b0:	69bb      	ldr	r3, [r7, #24]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	@ 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	080048a4 	.word	0x080048a4
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	007a1200 	.word	0x007a1200

080032d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032e8:	f7ff fa26 	bl	8002738 <HAL_PWREx_GetVoltageRange>
 80032ec:	6178      	str	r0, [r7, #20]
 80032ee:	e014      	b.n	800331a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032f0:	4b25      	ldr	r3, [pc, #148]	@ (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f4:	4a24      	ldr	r2, [pc, #144]	@ (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80032fc:	4b22      	ldr	r3, [pc, #136]	@ (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003308:	f7ff fa16 	bl	8002738 <HAL_PWREx_GetVoltageRange>
 800330c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800330e:	4b1e      	ldr	r3, [pc, #120]	@ (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	4a1d      	ldr	r2, [pc, #116]	@ (8003388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003318:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003320:	d10b      	bne.n	800333a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d919      	bls.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2ba0      	cmp	r3, #160	@ 0xa0
 800332c:	d902      	bls.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800332e:	2302      	movs	r3, #2
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e013      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003334:	2301      	movs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e010      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b80      	cmp	r3, #128	@ 0x80
 800333e:	d902      	bls.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003340:	2303      	movs	r3, #3
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	e00a      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b80      	cmp	r3, #128	@ 0x80
 800334a:	d102      	bne.n	8003352 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800334c:	2302      	movs	r3, #2
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	e004      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b70      	cmp	r3, #112	@ 0x70
 8003356:	d101      	bne.n	800335c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003358:	2301      	movs	r3, #1
 800335a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800335c:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 0207 	bic.w	r2, r3, #7
 8003364:	4909      	ldr	r1, [pc, #36]	@ (800338c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800336c:	4b07      	ldr	r3, [pc, #28]	@ (800338c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	40022000 	.word	0x40022000

08003390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e095      	b.n	80034ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d108      	bne.n	80033bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033b2:	d009      	beq.n	80033c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
 80033ba:	e005      	b.n	80033c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe fcd4 	bl	8001d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003408:	d902      	bls.n	8003410 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	e002      	b.n	8003416 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003414:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800341e:	d007      	beq.n	8003430 <HAL_SPI_Init+0xa0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003428:	d002      	beq.n	8003430 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003472:	ea42 0103 	orr.w	r1, r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	f003 0204 	and.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80034ac:	ea42 0103 	orr.w	r1, r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b088      	sub	sp, #32
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_SPI_Transmit+0x22>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e15f      	b.n	80037b8 <HAL_SPI_Transmit+0x2e2>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003500:	f7fe fdba 	bl	8002078 <HAL_GetTick>
 8003504:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d002      	beq.n	800351c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003516:	2302      	movs	r3, #2
 8003518:	77fb      	strb	r3, [r7, #31]
    goto error;
 800351a:	e148      	b.n	80037ae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Transmit+0x52>
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800352c:	e13f      	b.n	80037ae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2203      	movs	r2, #3
 8003532:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003578:	d10f      	bne.n	800359a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003588:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003598:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	d007      	beq.n	80035b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035c0:	d94f      	bls.n	8003662 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Transmit+0xfa>
 80035ca:	8afb      	ldrh	r3, [r7, #22]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d142      	bne.n	8003656 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	1c9a      	adds	r2, r3, #2
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035f4:	e02f      	b.n	8003656 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d112      	bne.n	800362a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	881a      	ldrh	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003628:	e015      	b.n	8003656 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800362a:	f7fe fd25 	bl	8002078 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d803      	bhi.n	8003642 <HAL_SPI_Transmit+0x16c>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003640:	d102      	bne.n	8003648 <HAL_SPI_Transmit+0x172>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003654:	e0ab      	b.n	80037ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ca      	bne.n	80035f6 <HAL_SPI_Transmit+0x120>
 8003660:	e080      	b.n	8003764 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_SPI_Transmit+0x19a>
 800366a:	8afb      	ldrh	r3, [r7, #22]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d174      	bne.n	800375a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d912      	bls.n	80036a0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367e:	881a      	ldrh	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368a:	1c9a      	adds	r2, r3, #2
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b02      	subs	r3, #2
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800369e:	e05c      	b.n	800375a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80036c6:	e048      	b.n	800375a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d12b      	bne.n	800372e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d912      	bls.n	8003706 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	1c9a      	adds	r2, r3, #2
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b02      	subs	r3, #2
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003704:	e029      	b.n	800375a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800372c:	e015      	b.n	800375a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800372e:	f7fe fca3 	bl	8002078 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d803      	bhi.n	8003746 <HAL_SPI_Transmit+0x270>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003744:	d102      	bne.n	800374c <HAL_SPI_Transmit+0x276>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003758:	e029      	b.n	80037ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1b1      	bne.n	80036c8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fb69 	bl	8003e40 <SPI_EndRxTxTransaction>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e003      	b.n	80037ae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80037b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037ce:	2301      	movs	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x26>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e20a      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x43c>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ee:	f7fe fc43 	bl	8002078 <HAL_GetTick>
 80037f2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037fa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003806:	887b      	ldrh	r3, [r7, #2]
 8003808:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800380a:	7efb      	ldrb	r3, [r7, #27]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d00e      	beq.n	800382e <HAL_SPI_TransmitReceive+0x6e>
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003816:	d106      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x66>
 8003820:	7efb      	ldrb	r3, [r7, #27]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d003      	beq.n	800382e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003826:	2302      	movs	r3, #2
 8003828:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800382c:	e1e0      	b.n	8003bf0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x80>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x80>
 800383a:	887b      	ldrh	r3, [r7, #2]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003846:	e1d3      	b.n	8003bf0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b04      	cmp	r3, #4
 8003852:	d003      	beq.n	800385c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2205      	movs	r2, #5
 8003858:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	887a      	ldrh	r2, [r7, #2]
 8003882:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800389e:	d802      	bhi.n	80038a6 <HAL_SPI_TransmitReceive+0xe6>
 80038a0:	8a3b      	ldrh	r3, [r7, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d908      	bls.n	80038b8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	e007      	b.n	80038c8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	d007      	beq.n	80038e6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038ee:	f240 8081 	bls.w	80039f4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x140>
 80038fa:	8a7b      	ldrh	r3, [r7, #18]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d16d      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	1c9a      	adds	r2, r3, #2
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003924:	e05a      	b.n	80039dc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d11b      	bne.n	800396c <HAL_SPI_TransmitReceive+0x1ac>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <HAL_SPI_TransmitReceive+0x1ac>
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	2b01      	cmp	r3, #1
 8003942:	d113      	bne.n	800396c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	881a      	ldrh	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003954:	1c9a      	adds	r2, r3, #2
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d11c      	bne.n	80039b4 <HAL_SPI_TransmitReceive+0x1f4>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	b292      	uxth	r2, r2
 8003992:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b0:	2301      	movs	r3, #1
 80039b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039b4:	f7fe fb60 	bl	8002078 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d80b      	bhi.n	80039dc <HAL_SPI_TransmitReceive+0x21c>
 80039c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ca:	d007      	beq.n	80039dc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80039da:	e109      	b.n	8003bf0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d19f      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x166>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d199      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x166>
 80039f2:	e0e3      	b.n	8003bbc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0x244>
 80039fc:	8a7b      	ldrh	r3, [r7, #18]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	f040 80cf 	bne.w	8003ba2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d912      	bls.n	8003a34 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	881a      	ldrh	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1e:	1c9a      	adds	r2, r3, #2
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b02      	subs	r3, #2
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a32:	e0b6      	b.n	8003ba2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	7812      	ldrb	r2, [r2, #0]
 8003a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5a:	e0a2      	b.n	8003ba2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d134      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x314>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02f      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x314>
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d12c      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d912      	bls.n	8003aaa <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	881a      	ldrh	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	1c9a      	adds	r2, r3, #2
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b02      	subs	r3, #2
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003aa8:	e012      	b.n	8003ad0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d148      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x3b4>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d042      	beq.n	8003b74 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d923      	bls.n	8003b42 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	b292      	uxth	r2, r2
 8003b06:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	1c9a      	adds	r2, r3, #2
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b02      	subs	r3, #2
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d81f      	bhi.n	8003b70 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	e016      	b.n	8003b70 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f103 020c 	add.w	r2, r3, #12
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	7812      	ldrb	r2, [r2, #0]
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b70:	2301      	movs	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b74:	f7fe fa80 	bl	8002078 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d803      	bhi.n	8003b8c <HAL_SPI_TransmitReceive+0x3cc>
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_TransmitReceive+0x3d2>
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d107      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ba0:	e026      	b.n	8003bf0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f47f af57 	bne.w	8003a5c <HAL_SPI_TransmitReceive+0x29c>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f47f af50 	bne.w	8003a5c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f93d 	bl	8003e40 <SPI_EndRxTxTransaction>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be6:	e003      	b.n	8003bf0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	@ 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c14:	f7fe fa30 	bl	8002078 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	4413      	add	r3, r2
 8003c22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c24:	f7fe fa28 	bl	8002078 <HAL_GetTick>
 8003c28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c2a:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	015b      	lsls	r3, r3, #5
 8003c30:	0d1b      	lsrs	r3, r3, #20
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	fb02 f303 	mul.w	r3, r2, r3
 8003c38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c3a:	e054      	b.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c42:	d050      	beq.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c44:	f7fe fa18 	bl	8002078 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d902      	bls.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d13d      	bne.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c72:	d111      	bne.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c7c:	d004      	beq.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c86:	d107      	bne.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca0:	d10f      	bne.n	8003cc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e017      	b.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d19b      	bne.n	8003c3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000150 	.word	0x20000150

08003d14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	@ 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d26:	f7fe f9a7 	bl	8002078 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	4413      	add	r3, r2
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d36:	f7fe f99f 	bl	8002078 <HAL_GetTick>
 8003d3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d44:	4b3d      	ldr	r3, [pc, #244]	@ (8003e3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00da      	lsls	r2, r3, #3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	0d1b      	lsrs	r3, r3, #20
 8003d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d5c:	e060      	b.n	8003e20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d64:	d107      	bne.n	8003d76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d104      	bne.n	8003d76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d7c:	d050      	beq.n	8003e20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d7e:	f7fe f97b 	bl	8002078 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d902      	bls.n	8003d94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d13d      	bne.n	8003e10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003da2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dac:	d111      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db6:	d004      	beq.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc0:	d107      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dda:	d10f      	bne.n	8003dfc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e010      	b.n	8003e32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d196      	bne.n	8003d5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3728      	adds	r7, #40	@ 0x28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000150 	.word	0x20000150

08003e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ff5b 	bl	8003d14 <SPI_WaitFifoStateUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e027      	b.n	8003ec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2180      	movs	r1, #128	@ 0x80
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff fec0 	bl	8003c04 <SPI_WaitFlagStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e014      	b.n	8003ec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff ff34 	bl	8003d14 <SPI_WaitFifoStateUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e000      	b.n	8003ec4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <malloc>:
 8003ecc:	4b02      	ldr	r3, [pc, #8]	@ (8003ed8 <malloc+0xc>)
 8003ece:	4601      	mov	r1, r0
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	f000 b82d 	b.w	8003f30 <_malloc_r>
 8003ed6:	bf00      	nop
 8003ed8:	2000015c 	.word	0x2000015c

08003edc <free>:
 8003edc:	4b02      	ldr	r3, [pc, #8]	@ (8003ee8 <free+0xc>)
 8003ede:	4601      	mov	r1, r0
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	f000 b937 	b.w	8004154 <_free_r>
 8003ee6:	bf00      	nop
 8003ee8:	2000015c 	.word	0x2000015c

08003eec <sbrk_aligned>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4e0f      	ldr	r6, [pc, #60]	@ (8003f2c <sbrk_aligned+0x40>)
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	6831      	ldr	r1, [r6, #0]
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	b911      	cbnz	r1, 8003efe <sbrk_aligned+0x12>
 8003ef8:	f000 f8e2 	bl	80040c0 <_sbrk_r>
 8003efc:	6030      	str	r0, [r6, #0]
 8003efe:	4621      	mov	r1, r4
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f8dd 	bl	80040c0 <_sbrk_r>
 8003f06:	1c43      	adds	r3, r0, #1
 8003f08:	d103      	bne.n	8003f12 <sbrk_aligned+0x26>
 8003f0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003f0e:	4620      	mov	r0, r4
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	1cc4      	adds	r4, r0, #3
 8003f14:	f024 0403 	bic.w	r4, r4, #3
 8003f18:	42a0      	cmp	r0, r4
 8003f1a:	d0f8      	beq.n	8003f0e <sbrk_aligned+0x22>
 8003f1c:	1a21      	subs	r1, r4, r0
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f000 f8ce 	bl	80040c0 <_sbrk_r>
 8003f24:	3001      	adds	r0, #1
 8003f26:	d1f2      	bne.n	8003f0e <sbrk_aligned+0x22>
 8003f28:	e7ef      	b.n	8003f0a <sbrk_aligned+0x1e>
 8003f2a:	bf00      	nop
 8003f2c:	20000370 	.word	0x20000370

08003f30 <_malloc_r>:
 8003f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f34:	1ccd      	adds	r5, r1, #3
 8003f36:	f025 0503 	bic.w	r5, r5, #3
 8003f3a:	3508      	adds	r5, #8
 8003f3c:	2d0c      	cmp	r5, #12
 8003f3e:	bf38      	it	cc
 8003f40:	250c      	movcc	r5, #12
 8003f42:	2d00      	cmp	r5, #0
 8003f44:	4606      	mov	r6, r0
 8003f46:	db01      	blt.n	8003f4c <_malloc_r+0x1c>
 8003f48:	42a9      	cmp	r1, r5
 8003f4a:	d904      	bls.n	8003f56 <_malloc_r+0x26>
 8003f4c:	230c      	movs	r3, #12
 8003f4e:	6033      	str	r3, [r6, #0]
 8003f50:	2000      	movs	r0, #0
 8003f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800402c <_malloc_r+0xfc>
 8003f5a:	f000 f89d 	bl	8004098 <__malloc_lock>
 8003f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f62:	461c      	mov	r4, r3
 8003f64:	bb44      	cbnz	r4, 8003fb8 <_malloc_r+0x88>
 8003f66:	4629      	mov	r1, r5
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f7ff ffbf 	bl	8003eec <sbrk_aligned>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	4604      	mov	r4, r0
 8003f72:	d158      	bne.n	8004026 <_malloc_r+0xf6>
 8003f74:	f8d8 4000 	ldr.w	r4, [r8]
 8003f78:	4627      	mov	r7, r4
 8003f7a:	2f00      	cmp	r7, #0
 8003f7c:	d143      	bne.n	8004006 <_malloc_r+0xd6>
 8003f7e:	2c00      	cmp	r4, #0
 8003f80:	d04b      	beq.n	800401a <_malloc_r+0xea>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	4639      	mov	r1, r7
 8003f86:	4630      	mov	r0, r6
 8003f88:	eb04 0903 	add.w	r9, r4, r3
 8003f8c:	f000 f898 	bl	80040c0 <_sbrk_r>
 8003f90:	4581      	cmp	r9, r0
 8003f92:	d142      	bne.n	800401a <_malloc_r+0xea>
 8003f94:	6821      	ldr	r1, [r4, #0]
 8003f96:	1a6d      	subs	r5, r5, r1
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f7ff ffa6 	bl	8003eec <sbrk_aligned>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d03a      	beq.n	800401a <_malloc_r+0xea>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	442b      	add	r3, r5
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	f8d8 3000 	ldr.w	r3, [r8]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	bb62      	cbnz	r2, 800400c <_malloc_r+0xdc>
 8003fb2:	f8c8 7000 	str.w	r7, [r8]
 8003fb6:	e00f      	b.n	8003fd8 <_malloc_r+0xa8>
 8003fb8:	6822      	ldr	r2, [r4, #0]
 8003fba:	1b52      	subs	r2, r2, r5
 8003fbc:	d420      	bmi.n	8004000 <_malloc_r+0xd0>
 8003fbe:	2a0b      	cmp	r2, #11
 8003fc0:	d917      	bls.n	8003ff2 <_malloc_r+0xc2>
 8003fc2:	1961      	adds	r1, r4, r5
 8003fc4:	42a3      	cmp	r3, r4
 8003fc6:	6025      	str	r5, [r4, #0]
 8003fc8:	bf18      	it	ne
 8003fca:	6059      	strne	r1, [r3, #4]
 8003fcc:	6863      	ldr	r3, [r4, #4]
 8003fce:	bf08      	it	eq
 8003fd0:	f8c8 1000 	streq.w	r1, [r8]
 8003fd4:	5162      	str	r2, [r4, r5]
 8003fd6:	604b      	str	r3, [r1, #4]
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f863 	bl	80040a4 <__malloc_unlock>
 8003fde:	f104 000b 	add.w	r0, r4, #11
 8003fe2:	1d23      	adds	r3, r4, #4
 8003fe4:	f020 0007 	bic.w	r0, r0, #7
 8003fe8:	1ac2      	subs	r2, r0, r3
 8003fea:	bf1c      	itt	ne
 8003fec:	1a1b      	subne	r3, r3, r0
 8003fee:	50a3      	strne	r3, [r4, r2]
 8003ff0:	e7af      	b.n	8003f52 <_malloc_r+0x22>
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	bf0c      	ite	eq
 8003ff8:	f8c8 2000 	streq.w	r2, [r8]
 8003ffc:	605a      	strne	r2, [r3, #4]
 8003ffe:	e7eb      	b.n	8003fd8 <_malloc_r+0xa8>
 8004000:	4623      	mov	r3, r4
 8004002:	6864      	ldr	r4, [r4, #4]
 8004004:	e7ae      	b.n	8003f64 <_malloc_r+0x34>
 8004006:	463c      	mov	r4, r7
 8004008:	687f      	ldr	r7, [r7, #4]
 800400a:	e7b6      	b.n	8003f7a <_malloc_r+0x4a>
 800400c:	461a      	mov	r2, r3
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	42a3      	cmp	r3, r4
 8004012:	d1fb      	bne.n	800400c <_malloc_r+0xdc>
 8004014:	2300      	movs	r3, #0
 8004016:	6053      	str	r3, [r2, #4]
 8004018:	e7de      	b.n	8003fd8 <_malloc_r+0xa8>
 800401a:	230c      	movs	r3, #12
 800401c:	6033      	str	r3, [r6, #0]
 800401e:	4630      	mov	r0, r6
 8004020:	f000 f840 	bl	80040a4 <__malloc_unlock>
 8004024:	e794      	b.n	8003f50 <_malloc_r+0x20>
 8004026:	6005      	str	r5, [r0, #0]
 8004028:	e7d6      	b.n	8003fd8 <_malloc_r+0xa8>
 800402a:	bf00      	nop
 800402c:	20000374 	.word	0x20000374

08004030 <sniprintf>:
 8004030:	b40c      	push	{r2, r3}
 8004032:	b530      	push	{r4, r5, lr}
 8004034:	4b17      	ldr	r3, [pc, #92]	@ (8004094 <sniprintf+0x64>)
 8004036:	1e0c      	subs	r4, r1, #0
 8004038:	681d      	ldr	r5, [r3, #0]
 800403a:	b09d      	sub	sp, #116	@ 0x74
 800403c:	da08      	bge.n	8004050 <sniprintf+0x20>
 800403e:	238b      	movs	r3, #139	@ 0x8b
 8004040:	602b      	str	r3, [r5, #0]
 8004042:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004046:	b01d      	add	sp, #116	@ 0x74
 8004048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800404c:	b002      	add	sp, #8
 800404e:	4770      	bx	lr
 8004050:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004054:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004058:	bf14      	ite	ne
 800405a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800405e:	4623      	moveq	r3, r4
 8004060:	9304      	str	r3, [sp, #16]
 8004062:	9307      	str	r3, [sp, #28]
 8004064:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004068:	9002      	str	r0, [sp, #8]
 800406a:	9006      	str	r0, [sp, #24]
 800406c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004070:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004072:	ab21      	add	r3, sp, #132	@ 0x84
 8004074:	a902      	add	r1, sp, #8
 8004076:	4628      	mov	r0, r5
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	f000 f911 	bl	80042a0 <_svfiprintf_r>
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	bfbc      	itt	lt
 8004082:	238b      	movlt	r3, #139	@ 0x8b
 8004084:	602b      	strlt	r3, [r5, #0]
 8004086:	2c00      	cmp	r4, #0
 8004088:	d0dd      	beq.n	8004046 <sniprintf+0x16>
 800408a:	9b02      	ldr	r3, [sp, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e7d9      	b.n	8004046 <sniprintf+0x16>
 8004092:	bf00      	nop
 8004094:	2000015c 	.word	0x2000015c

08004098 <__malloc_lock>:
 8004098:	4801      	ldr	r0, [pc, #4]	@ (80040a0 <__malloc_lock+0x8>)
 800409a:	f000 b84b 	b.w	8004134 <__retarget_lock_acquire_recursive>
 800409e:	bf00      	nop
 80040a0:	200004b0 	.word	0x200004b0

080040a4 <__malloc_unlock>:
 80040a4:	4801      	ldr	r0, [pc, #4]	@ (80040ac <__malloc_unlock+0x8>)
 80040a6:	f000 b846 	b.w	8004136 <__retarget_lock_release_recursive>
 80040aa:	bf00      	nop
 80040ac:	200004b0 	.word	0x200004b0

080040b0 <memset>:
 80040b0:	4402      	add	r2, r0
 80040b2:	4603      	mov	r3, r0
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d100      	bne.n	80040ba <memset+0xa>
 80040b8:	4770      	bx	lr
 80040ba:	f803 1b01 	strb.w	r1, [r3], #1
 80040be:	e7f9      	b.n	80040b4 <memset+0x4>

080040c0 <_sbrk_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4d06      	ldr	r5, [pc, #24]	@ (80040dc <_sbrk_r+0x1c>)
 80040c4:	2300      	movs	r3, #0
 80040c6:	4604      	mov	r4, r0
 80040c8:	4608      	mov	r0, r1
 80040ca:	602b      	str	r3, [r5, #0]
 80040cc:	f7fd fee0 	bl	8001e90 <_sbrk>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_sbrk_r+0x1a>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_sbrk_r+0x1a>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	200004b4 	.word	0x200004b4

080040e0 <__errno>:
 80040e0:	4b01      	ldr	r3, [pc, #4]	@ (80040e8 <__errno+0x8>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	2000015c 	.word	0x2000015c

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004124 <__libc_init_array+0x38>)
 80040f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004128 <__libc_init_array+0x3c>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	2600      	movs	r6, #0
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	4d0b      	ldr	r5, [pc, #44]	@ (800412c <__libc_init_array+0x40>)
 80040fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004130 <__libc_init_array+0x44>)
 8004100:	f000 fba8 	bl	8004854 <_init>
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	2600      	movs	r6, #0
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	08004910 	.word	0x08004910
 8004128:	08004910 	.word	0x08004910
 800412c:	08004910 	.word	0x08004910
 8004130:	08004914 	.word	0x08004914

08004134 <__retarget_lock_acquire_recursive>:
 8004134:	4770      	bx	lr

08004136 <__retarget_lock_release_recursive>:
 8004136:	4770      	bx	lr

08004138 <memcpy>:
 8004138:	440a      	add	r2, r1
 800413a:	4291      	cmp	r1, r2
 800413c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004140:	d100      	bne.n	8004144 <memcpy+0xc>
 8004142:	4770      	bx	lr
 8004144:	b510      	push	{r4, lr}
 8004146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800414a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800414e:	4291      	cmp	r1, r2
 8004150:	d1f9      	bne.n	8004146 <memcpy+0xe>
 8004152:	bd10      	pop	{r4, pc}

08004154 <_free_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4605      	mov	r5, r0
 8004158:	2900      	cmp	r1, #0
 800415a:	d041      	beq.n	80041e0 <_free_r+0x8c>
 800415c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004160:	1f0c      	subs	r4, r1, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	bfb8      	it	lt
 8004166:	18e4      	addlt	r4, r4, r3
 8004168:	f7ff ff96 	bl	8004098 <__malloc_lock>
 800416c:	4a1d      	ldr	r2, [pc, #116]	@ (80041e4 <_free_r+0x90>)
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	b933      	cbnz	r3, 8004180 <_free_r+0x2c>
 8004172:	6063      	str	r3, [r4, #4]
 8004174:	6014      	str	r4, [r2, #0]
 8004176:	4628      	mov	r0, r5
 8004178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800417c:	f7ff bf92 	b.w	80040a4 <__malloc_unlock>
 8004180:	42a3      	cmp	r3, r4
 8004182:	d908      	bls.n	8004196 <_free_r+0x42>
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	1821      	adds	r1, r4, r0
 8004188:	428b      	cmp	r3, r1
 800418a:	bf01      	itttt	eq
 800418c:	6819      	ldreq	r1, [r3, #0]
 800418e:	685b      	ldreq	r3, [r3, #4]
 8004190:	1809      	addeq	r1, r1, r0
 8004192:	6021      	streq	r1, [r4, #0]
 8004194:	e7ed      	b.n	8004172 <_free_r+0x1e>
 8004196:	461a      	mov	r2, r3
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	b10b      	cbz	r3, 80041a0 <_free_r+0x4c>
 800419c:	42a3      	cmp	r3, r4
 800419e:	d9fa      	bls.n	8004196 <_free_r+0x42>
 80041a0:	6811      	ldr	r1, [r2, #0]
 80041a2:	1850      	adds	r0, r2, r1
 80041a4:	42a0      	cmp	r0, r4
 80041a6:	d10b      	bne.n	80041c0 <_free_r+0x6c>
 80041a8:	6820      	ldr	r0, [r4, #0]
 80041aa:	4401      	add	r1, r0
 80041ac:	1850      	adds	r0, r2, r1
 80041ae:	4283      	cmp	r3, r0
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	d1e0      	bne.n	8004176 <_free_r+0x22>
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	6053      	str	r3, [r2, #4]
 80041ba:	4408      	add	r0, r1
 80041bc:	6010      	str	r0, [r2, #0]
 80041be:	e7da      	b.n	8004176 <_free_r+0x22>
 80041c0:	d902      	bls.n	80041c8 <_free_r+0x74>
 80041c2:	230c      	movs	r3, #12
 80041c4:	602b      	str	r3, [r5, #0]
 80041c6:	e7d6      	b.n	8004176 <_free_r+0x22>
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	1821      	adds	r1, r4, r0
 80041cc:	428b      	cmp	r3, r1
 80041ce:	bf04      	itt	eq
 80041d0:	6819      	ldreq	r1, [r3, #0]
 80041d2:	685b      	ldreq	r3, [r3, #4]
 80041d4:	6063      	str	r3, [r4, #4]
 80041d6:	bf04      	itt	eq
 80041d8:	1809      	addeq	r1, r1, r0
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	6054      	str	r4, [r2, #4]
 80041de:	e7ca      	b.n	8004176 <_free_r+0x22>
 80041e0:	bd38      	pop	{r3, r4, r5, pc}
 80041e2:	bf00      	nop
 80041e4:	20000374 	.word	0x20000374

080041e8 <__ssputs_r>:
 80041e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	688e      	ldr	r6, [r1, #8]
 80041ee:	461f      	mov	r7, r3
 80041f0:	42be      	cmp	r6, r7
 80041f2:	680b      	ldr	r3, [r1, #0]
 80041f4:	4682      	mov	sl, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	4690      	mov	r8, r2
 80041fa:	d82d      	bhi.n	8004258 <__ssputs_r+0x70>
 80041fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004200:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004204:	d026      	beq.n	8004254 <__ssputs_r+0x6c>
 8004206:	6965      	ldr	r5, [r4, #20]
 8004208:	6909      	ldr	r1, [r1, #16]
 800420a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800420e:	eba3 0901 	sub.w	r9, r3, r1
 8004212:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004216:	1c7b      	adds	r3, r7, #1
 8004218:	444b      	add	r3, r9
 800421a:	106d      	asrs	r5, r5, #1
 800421c:	429d      	cmp	r5, r3
 800421e:	bf38      	it	cc
 8004220:	461d      	movcc	r5, r3
 8004222:	0553      	lsls	r3, r2, #21
 8004224:	d527      	bpl.n	8004276 <__ssputs_r+0x8e>
 8004226:	4629      	mov	r1, r5
 8004228:	f7ff fe82 	bl	8003f30 <_malloc_r>
 800422c:	4606      	mov	r6, r0
 800422e:	b360      	cbz	r0, 800428a <__ssputs_r+0xa2>
 8004230:	6921      	ldr	r1, [r4, #16]
 8004232:	464a      	mov	r2, r9
 8004234:	f7ff ff80 	bl	8004138 <memcpy>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800423e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	6126      	str	r6, [r4, #16]
 8004246:	6165      	str	r5, [r4, #20]
 8004248:	444e      	add	r6, r9
 800424a:	eba5 0509 	sub.w	r5, r5, r9
 800424e:	6026      	str	r6, [r4, #0]
 8004250:	60a5      	str	r5, [r4, #8]
 8004252:	463e      	mov	r6, r7
 8004254:	42be      	cmp	r6, r7
 8004256:	d900      	bls.n	800425a <__ssputs_r+0x72>
 8004258:	463e      	mov	r6, r7
 800425a:	6820      	ldr	r0, [r4, #0]
 800425c:	4632      	mov	r2, r6
 800425e:	4641      	mov	r1, r8
 8004260:	f000 fad6 	bl	8004810 <memmove>
 8004264:	68a3      	ldr	r3, [r4, #8]
 8004266:	1b9b      	subs	r3, r3, r6
 8004268:	60a3      	str	r3, [r4, #8]
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	4433      	add	r3, r6
 800426e:	6023      	str	r3, [r4, #0]
 8004270:	2000      	movs	r0, #0
 8004272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004276:	462a      	mov	r2, r5
 8004278:	f000 fa9c 	bl	80047b4 <_realloc_r>
 800427c:	4606      	mov	r6, r0
 800427e:	2800      	cmp	r0, #0
 8004280:	d1e0      	bne.n	8004244 <__ssputs_r+0x5c>
 8004282:	6921      	ldr	r1, [r4, #16]
 8004284:	4650      	mov	r0, sl
 8004286:	f7ff ff65 	bl	8004154 <_free_r>
 800428a:	230c      	movs	r3, #12
 800428c:	f8ca 3000 	str.w	r3, [sl]
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800429c:	e7e9      	b.n	8004272 <__ssputs_r+0x8a>
	...

080042a0 <_svfiprintf_r>:
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	4698      	mov	r8, r3
 80042a6:	898b      	ldrh	r3, [r1, #12]
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	b09d      	sub	sp, #116	@ 0x74
 80042ac:	4607      	mov	r7, r0
 80042ae:	460d      	mov	r5, r1
 80042b0:	4614      	mov	r4, r2
 80042b2:	d510      	bpl.n	80042d6 <_svfiprintf_r+0x36>
 80042b4:	690b      	ldr	r3, [r1, #16]
 80042b6:	b973      	cbnz	r3, 80042d6 <_svfiprintf_r+0x36>
 80042b8:	2140      	movs	r1, #64	@ 0x40
 80042ba:	f7ff fe39 	bl	8003f30 <_malloc_r>
 80042be:	6028      	str	r0, [r5, #0]
 80042c0:	6128      	str	r0, [r5, #16]
 80042c2:	b930      	cbnz	r0, 80042d2 <_svfiprintf_r+0x32>
 80042c4:	230c      	movs	r3, #12
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042cc:	b01d      	add	sp, #116	@ 0x74
 80042ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d2:	2340      	movs	r3, #64	@ 0x40
 80042d4:	616b      	str	r3, [r5, #20]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042da:	2320      	movs	r3, #32
 80042dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e4:	2330      	movs	r3, #48	@ 0x30
 80042e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004484 <_svfiprintf_r+0x1e4>
 80042ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042ee:	f04f 0901 	mov.w	r9, #1
 80042f2:	4623      	mov	r3, r4
 80042f4:	469a      	mov	sl, r3
 80042f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042fa:	b10a      	cbz	r2, 8004300 <_svfiprintf_r+0x60>
 80042fc:	2a25      	cmp	r2, #37	@ 0x25
 80042fe:	d1f9      	bne.n	80042f4 <_svfiprintf_r+0x54>
 8004300:	ebba 0b04 	subs.w	fp, sl, r4
 8004304:	d00b      	beq.n	800431e <_svfiprintf_r+0x7e>
 8004306:	465b      	mov	r3, fp
 8004308:	4622      	mov	r2, r4
 800430a:	4629      	mov	r1, r5
 800430c:	4638      	mov	r0, r7
 800430e:	f7ff ff6b 	bl	80041e8 <__ssputs_r>
 8004312:	3001      	adds	r0, #1
 8004314:	f000 80a7 	beq.w	8004466 <_svfiprintf_r+0x1c6>
 8004318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800431a:	445a      	add	r2, fp
 800431c:	9209      	str	r2, [sp, #36]	@ 0x24
 800431e:	f89a 3000 	ldrb.w	r3, [sl]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 809f 	beq.w	8004466 <_svfiprintf_r+0x1c6>
 8004328:	2300      	movs	r3, #0
 800432a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800432e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004332:	f10a 0a01 	add.w	sl, sl, #1
 8004336:	9304      	str	r3, [sp, #16]
 8004338:	9307      	str	r3, [sp, #28]
 800433a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800433e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004340:	4654      	mov	r4, sl
 8004342:	2205      	movs	r2, #5
 8004344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004348:	484e      	ldr	r0, [pc, #312]	@ (8004484 <_svfiprintf_r+0x1e4>)
 800434a:	f7fb ff49 	bl	80001e0 <memchr>
 800434e:	9a04      	ldr	r2, [sp, #16]
 8004350:	b9d8      	cbnz	r0, 800438a <_svfiprintf_r+0xea>
 8004352:	06d0      	lsls	r0, r2, #27
 8004354:	bf44      	itt	mi
 8004356:	2320      	movmi	r3, #32
 8004358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800435c:	0711      	lsls	r1, r2, #28
 800435e:	bf44      	itt	mi
 8004360:	232b      	movmi	r3, #43	@ 0x2b
 8004362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004366:	f89a 3000 	ldrb.w	r3, [sl]
 800436a:	2b2a      	cmp	r3, #42	@ 0x2a
 800436c:	d015      	beq.n	800439a <_svfiprintf_r+0xfa>
 800436e:	9a07      	ldr	r2, [sp, #28]
 8004370:	4654      	mov	r4, sl
 8004372:	2000      	movs	r0, #0
 8004374:	f04f 0c0a 	mov.w	ip, #10
 8004378:	4621      	mov	r1, r4
 800437a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800437e:	3b30      	subs	r3, #48	@ 0x30
 8004380:	2b09      	cmp	r3, #9
 8004382:	d94b      	bls.n	800441c <_svfiprintf_r+0x17c>
 8004384:	b1b0      	cbz	r0, 80043b4 <_svfiprintf_r+0x114>
 8004386:	9207      	str	r2, [sp, #28]
 8004388:	e014      	b.n	80043b4 <_svfiprintf_r+0x114>
 800438a:	eba0 0308 	sub.w	r3, r0, r8
 800438e:	fa09 f303 	lsl.w	r3, r9, r3
 8004392:	4313      	orrs	r3, r2
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	46a2      	mov	sl, r4
 8004398:	e7d2      	b.n	8004340 <_svfiprintf_r+0xa0>
 800439a:	9b03      	ldr	r3, [sp, #12]
 800439c:	1d19      	adds	r1, r3, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	9103      	str	r1, [sp, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bfbb      	ittet	lt
 80043a6:	425b      	neglt	r3, r3
 80043a8:	f042 0202 	orrlt.w	r2, r2, #2
 80043ac:	9307      	strge	r3, [sp, #28]
 80043ae:	9307      	strlt	r3, [sp, #28]
 80043b0:	bfb8      	it	lt
 80043b2:	9204      	strlt	r2, [sp, #16]
 80043b4:	7823      	ldrb	r3, [r4, #0]
 80043b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80043b8:	d10a      	bne.n	80043d0 <_svfiprintf_r+0x130>
 80043ba:	7863      	ldrb	r3, [r4, #1]
 80043bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80043be:	d132      	bne.n	8004426 <_svfiprintf_r+0x186>
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	9203      	str	r2, [sp, #12]
 80043c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043cc:	3402      	adds	r4, #2
 80043ce:	9305      	str	r3, [sp, #20]
 80043d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004494 <_svfiprintf_r+0x1f4>
 80043d4:	7821      	ldrb	r1, [r4, #0]
 80043d6:	2203      	movs	r2, #3
 80043d8:	4650      	mov	r0, sl
 80043da:	f7fb ff01 	bl	80001e0 <memchr>
 80043de:	b138      	cbz	r0, 80043f0 <_svfiprintf_r+0x150>
 80043e0:	9b04      	ldr	r3, [sp, #16]
 80043e2:	eba0 000a 	sub.w	r0, r0, sl
 80043e6:	2240      	movs	r2, #64	@ 0x40
 80043e8:	4082      	lsls	r2, r0
 80043ea:	4313      	orrs	r3, r2
 80043ec:	3401      	adds	r4, #1
 80043ee:	9304      	str	r3, [sp, #16]
 80043f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f4:	4824      	ldr	r0, [pc, #144]	@ (8004488 <_svfiprintf_r+0x1e8>)
 80043f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043fa:	2206      	movs	r2, #6
 80043fc:	f7fb fef0 	bl	80001e0 <memchr>
 8004400:	2800      	cmp	r0, #0
 8004402:	d036      	beq.n	8004472 <_svfiprintf_r+0x1d2>
 8004404:	4b21      	ldr	r3, [pc, #132]	@ (800448c <_svfiprintf_r+0x1ec>)
 8004406:	bb1b      	cbnz	r3, 8004450 <_svfiprintf_r+0x1b0>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	3307      	adds	r3, #7
 800440c:	f023 0307 	bic.w	r3, r3, #7
 8004410:	3308      	adds	r3, #8
 8004412:	9303      	str	r3, [sp, #12]
 8004414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004416:	4433      	add	r3, r6
 8004418:	9309      	str	r3, [sp, #36]	@ 0x24
 800441a:	e76a      	b.n	80042f2 <_svfiprintf_r+0x52>
 800441c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004420:	460c      	mov	r4, r1
 8004422:	2001      	movs	r0, #1
 8004424:	e7a8      	b.n	8004378 <_svfiprintf_r+0xd8>
 8004426:	2300      	movs	r3, #0
 8004428:	3401      	adds	r4, #1
 800442a:	9305      	str	r3, [sp, #20]
 800442c:	4619      	mov	r1, r3
 800442e:	f04f 0c0a 	mov.w	ip, #10
 8004432:	4620      	mov	r0, r4
 8004434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004438:	3a30      	subs	r2, #48	@ 0x30
 800443a:	2a09      	cmp	r2, #9
 800443c:	d903      	bls.n	8004446 <_svfiprintf_r+0x1a6>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0c6      	beq.n	80043d0 <_svfiprintf_r+0x130>
 8004442:	9105      	str	r1, [sp, #20]
 8004444:	e7c4      	b.n	80043d0 <_svfiprintf_r+0x130>
 8004446:	fb0c 2101 	mla	r1, ip, r1, r2
 800444a:	4604      	mov	r4, r0
 800444c:	2301      	movs	r3, #1
 800444e:	e7f0      	b.n	8004432 <_svfiprintf_r+0x192>
 8004450:	ab03      	add	r3, sp, #12
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	462a      	mov	r2, r5
 8004456:	4b0e      	ldr	r3, [pc, #56]	@ (8004490 <_svfiprintf_r+0x1f0>)
 8004458:	a904      	add	r1, sp, #16
 800445a:	4638      	mov	r0, r7
 800445c:	f3af 8000 	nop.w
 8004460:	1c42      	adds	r2, r0, #1
 8004462:	4606      	mov	r6, r0
 8004464:	d1d6      	bne.n	8004414 <_svfiprintf_r+0x174>
 8004466:	89ab      	ldrh	r3, [r5, #12]
 8004468:	065b      	lsls	r3, r3, #25
 800446a:	f53f af2d 	bmi.w	80042c8 <_svfiprintf_r+0x28>
 800446e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004470:	e72c      	b.n	80042cc <_svfiprintf_r+0x2c>
 8004472:	ab03      	add	r3, sp, #12
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	462a      	mov	r2, r5
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <_svfiprintf_r+0x1f0>)
 800447a:	a904      	add	r1, sp, #16
 800447c:	4638      	mov	r0, r7
 800447e:	f000 f879 	bl	8004574 <_printf_i>
 8004482:	e7ed      	b.n	8004460 <_svfiprintf_r+0x1c0>
 8004484:	080048d4 	.word	0x080048d4
 8004488:	080048de 	.word	0x080048de
 800448c:	00000000 	.word	0x00000000
 8004490:	080041e9 	.word	0x080041e9
 8004494:	080048da 	.word	0x080048da

08004498 <_printf_common>:
 8004498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800449c:	4616      	mov	r6, r2
 800449e:	4698      	mov	r8, r3
 80044a0:	688a      	ldr	r2, [r1, #8]
 80044a2:	690b      	ldr	r3, [r1, #16]
 80044a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044a8:	4293      	cmp	r3, r2
 80044aa:	bfb8      	it	lt
 80044ac:	4613      	movlt	r3, r2
 80044ae:	6033      	str	r3, [r6, #0]
 80044b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044b4:	4607      	mov	r7, r0
 80044b6:	460c      	mov	r4, r1
 80044b8:	b10a      	cbz	r2, 80044be <_printf_common+0x26>
 80044ba:	3301      	adds	r3, #1
 80044bc:	6033      	str	r3, [r6, #0]
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	0699      	lsls	r1, r3, #26
 80044c2:	bf42      	ittt	mi
 80044c4:	6833      	ldrmi	r3, [r6, #0]
 80044c6:	3302      	addmi	r3, #2
 80044c8:	6033      	strmi	r3, [r6, #0]
 80044ca:	6825      	ldr	r5, [r4, #0]
 80044cc:	f015 0506 	ands.w	r5, r5, #6
 80044d0:	d106      	bne.n	80044e0 <_printf_common+0x48>
 80044d2:	f104 0a19 	add.w	sl, r4, #25
 80044d6:	68e3      	ldr	r3, [r4, #12]
 80044d8:	6832      	ldr	r2, [r6, #0]
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	42ab      	cmp	r3, r5
 80044de:	dc26      	bgt.n	800452e <_printf_common+0x96>
 80044e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	3b00      	subs	r3, #0
 80044e8:	bf18      	it	ne
 80044ea:	2301      	movne	r3, #1
 80044ec:	0692      	lsls	r2, r2, #26
 80044ee:	d42b      	bmi.n	8004548 <_printf_common+0xb0>
 80044f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044f4:	4641      	mov	r1, r8
 80044f6:	4638      	mov	r0, r7
 80044f8:	47c8      	blx	r9
 80044fa:	3001      	adds	r0, #1
 80044fc:	d01e      	beq.n	800453c <_printf_common+0xa4>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	6922      	ldr	r2, [r4, #16]
 8004502:	f003 0306 	and.w	r3, r3, #6
 8004506:	2b04      	cmp	r3, #4
 8004508:	bf02      	ittt	eq
 800450a:	68e5      	ldreq	r5, [r4, #12]
 800450c:	6833      	ldreq	r3, [r6, #0]
 800450e:	1aed      	subeq	r5, r5, r3
 8004510:	68a3      	ldr	r3, [r4, #8]
 8004512:	bf0c      	ite	eq
 8004514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004518:	2500      	movne	r5, #0
 800451a:	4293      	cmp	r3, r2
 800451c:	bfc4      	itt	gt
 800451e:	1a9b      	subgt	r3, r3, r2
 8004520:	18ed      	addgt	r5, r5, r3
 8004522:	2600      	movs	r6, #0
 8004524:	341a      	adds	r4, #26
 8004526:	42b5      	cmp	r5, r6
 8004528:	d11a      	bne.n	8004560 <_printf_common+0xc8>
 800452a:	2000      	movs	r0, #0
 800452c:	e008      	b.n	8004540 <_printf_common+0xa8>
 800452e:	2301      	movs	r3, #1
 8004530:	4652      	mov	r2, sl
 8004532:	4641      	mov	r1, r8
 8004534:	4638      	mov	r0, r7
 8004536:	47c8      	blx	r9
 8004538:	3001      	adds	r0, #1
 800453a:	d103      	bne.n	8004544 <_printf_common+0xac>
 800453c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004544:	3501      	adds	r5, #1
 8004546:	e7c6      	b.n	80044d6 <_printf_common+0x3e>
 8004548:	18e1      	adds	r1, r4, r3
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	2030      	movs	r0, #48	@ 0x30
 800454e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004552:	4422      	add	r2, r4
 8004554:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004558:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800455c:	3302      	adds	r3, #2
 800455e:	e7c7      	b.n	80044f0 <_printf_common+0x58>
 8004560:	2301      	movs	r3, #1
 8004562:	4622      	mov	r2, r4
 8004564:	4641      	mov	r1, r8
 8004566:	4638      	mov	r0, r7
 8004568:	47c8      	blx	r9
 800456a:	3001      	adds	r0, #1
 800456c:	d0e6      	beq.n	800453c <_printf_common+0xa4>
 800456e:	3601      	adds	r6, #1
 8004570:	e7d9      	b.n	8004526 <_printf_common+0x8e>
	...

08004574 <_printf_i>:
 8004574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004578:	7e0f      	ldrb	r7, [r1, #24]
 800457a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800457c:	2f78      	cmp	r7, #120	@ 0x78
 800457e:	4691      	mov	r9, r2
 8004580:	4680      	mov	r8, r0
 8004582:	460c      	mov	r4, r1
 8004584:	469a      	mov	sl, r3
 8004586:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800458a:	d807      	bhi.n	800459c <_printf_i+0x28>
 800458c:	2f62      	cmp	r7, #98	@ 0x62
 800458e:	d80a      	bhi.n	80045a6 <_printf_i+0x32>
 8004590:	2f00      	cmp	r7, #0
 8004592:	f000 80d2 	beq.w	800473a <_printf_i+0x1c6>
 8004596:	2f58      	cmp	r7, #88	@ 0x58
 8004598:	f000 80b9 	beq.w	800470e <_printf_i+0x19a>
 800459c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045a4:	e03a      	b.n	800461c <_printf_i+0xa8>
 80045a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045aa:	2b15      	cmp	r3, #21
 80045ac:	d8f6      	bhi.n	800459c <_printf_i+0x28>
 80045ae:	a101      	add	r1, pc, #4	@ (adr r1, 80045b4 <_printf_i+0x40>)
 80045b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045b4:	0800460d 	.word	0x0800460d
 80045b8:	08004621 	.word	0x08004621
 80045bc:	0800459d 	.word	0x0800459d
 80045c0:	0800459d 	.word	0x0800459d
 80045c4:	0800459d 	.word	0x0800459d
 80045c8:	0800459d 	.word	0x0800459d
 80045cc:	08004621 	.word	0x08004621
 80045d0:	0800459d 	.word	0x0800459d
 80045d4:	0800459d 	.word	0x0800459d
 80045d8:	0800459d 	.word	0x0800459d
 80045dc:	0800459d 	.word	0x0800459d
 80045e0:	08004721 	.word	0x08004721
 80045e4:	0800464b 	.word	0x0800464b
 80045e8:	080046db 	.word	0x080046db
 80045ec:	0800459d 	.word	0x0800459d
 80045f0:	0800459d 	.word	0x0800459d
 80045f4:	08004743 	.word	0x08004743
 80045f8:	0800459d 	.word	0x0800459d
 80045fc:	0800464b 	.word	0x0800464b
 8004600:	0800459d 	.word	0x0800459d
 8004604:	0800459d 	.word	0x0800459d
 8004608:	080046e3 	.word	0x080046e3
 800460c:	6833      	ldr	r3, [r6, #0]
 800460e:	1d1a      	adds	r2, r3, #4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6032      	str	r2, [r6, #0]
 8004614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004618:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800461c:	2301      	movs	r3, #1
 800461e:	e09d      	b.n	800475c <_printf_i+0x1e8>
 8004620:	6833      	ldr	r3, [r6, #0]
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	1d19      	adds	r1, r3, #4
 8004626:	6031      	str	r1, [r6, #0]
 8004628:	0606      	lsls	r6, r0, #24
 800462a:	d501      	bpl.n	8004630 <_printf_i+0xbc>
 800462c:	681d      	ldr	r5, [r3, #0]
 800462e:	e003      	b.n	8004638 <_printf_i+0xc4>
 8004630:	0645      	lsls	r5, r0, #25
 8004632:	d5fb      	bpl.n	800462c <_printf_i+0xb8>
 8004634:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004638:	2d00      	cmp	r5, #0
 800463a:	da03      	bge.n	8004644 <_printf_i+0xd0>
 800463c:	232d      	movs	r3, #45	@ 0x2d
 800463e:	426d      	negs	r5, r5
 8004640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004644:	4859      	ldr	r0, [pc, #356]	@ (80047ac <_printf_i+0x238>)
 8004646:	230a      	movs	r3, #10
 8004648:	e011      	b.n	800466e <_printf_i+0xfa>
 800464a:	6821      	ldr	r1, [r4, #0]
 800464c:	6833      	ldr	r3, [r6, #0]
 800464e:	0608      	lsls	r0, r1, #24
 8004650:	f853 5b04 	ldr.w	r5, [r3], #4
 8004654:	d402      	bmi.n	800465c <_printf_i+0xe8>
 8004656:	0649      	lsls	r1, r1, #25
 8004658:	bf48      	it	mi
 800465a:	b2ad      	uxthmi	r5, r5
 800465c:	2f6f      	cmp	r7, #111	@ 0x6f
 800465e:	4853      	ldr	r0, [pc, #332]	@ (80047ac <_printf_i+0x238>)
 8004660:	6033      	str	r3, [r6, #0]
 8004662:	bf14      	ite	ne
 8004664:	230a      	movne	r3, #10
 8004666:	2308      	moveq	r3, #8
 8004668:	2100      	movs	r1, #0
 800466a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800466e:	6866      	ldr	r6, [r4, #4]
 8004670:	60a6      	str	r6, [r4, #8]
 8004672:	2e00      	cmp	r6, #0
 8004674:	bfa2      	ittt	ge
 8004676:	6821      	ldrge	r1, [r4, #0]
 8004678:	f021 0104 	bicge.w	r1, r1, #4
 800467c:	6021      	strge	r1, [r4, #0]
 800467e:	b90d      	cbnz	r5, 8004684 <_printf_i+0x110>
 8004680:	2e00      	cmp	r6, #0
 8004682:	d04b      	beq.n	800471c <_printf_i+0x1a8>
 8004684:	4616      	mov	r6, r2
 8004686:	fbb5 f1f3 	udiv	r1, r5, r3
 800468a:	fb03 5711 	mls	r7, r3, r1, r5
 800468e:	5dc7      	ldrb	r7, [r0, r7]
 8004690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004694:	462f      	mov	r7, r5
 8004696:	42bb      	cmp	r3, r7
 8004698:	460d      	mov	r5, r1
 800469a:	d9f4      	bls.n	8004686 <_printf_i+0x112>
 800469c:	2b08      	cmp	r3, #8
 800469e:	d10b      	bne.n	80046b8 <_printf_i+0x144>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	07df      	lsls	r7, r3, #31
 80046a4:	d508      	bpl.n	80046b8 <_printf_i+0x144>
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	6861      	ldr	r1, [r4, #4]
 80046aa:	4299      	cmp	r1, r3
 80046ac:	bfde      	ittt	le
 80046ae:	2330      	movle	r3, #48	@ 0x30
 80046b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80046b8:	1b92      	subs	r2, r2, r6
 80046ba:	6122      	str	r2, [r4, #16]
 80046bc:	f8cd a000 	str.w	sl, [sp]
 80046c0:	464b      	mov	r3, r9
 80046c2:	aa03      	add	r2, sp, #12
 80046c4:	4621      	mov	r1, r4
 80046c6:	4640      	mov	r0, r8
 80046c8:	f7ff fee6 	bl	8004498 <_printf_common>
 80046cc:	3001      	adds	r0, #1
 80046ce:	d14a      	bne.n	8004766 <_printf_i+0x1f2>
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046d4:	b004      	add	sp, #16
 80046d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	f043 0320 	orr.w	r3, r3, #32
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	4833      	ldr	r0, [pc, #204]	@ (80047b0 <_printf_i+0x23c>)
 80046e4:	2778      	movs	r7, #120	@ 0x78
 80046e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	6831      	ldr	r1, [r6, #0]
 80046ee:	061f      	lsls	r7, r3, #24
 80046f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80046f4:	d402      	bmi.n	80046fc <_printf_i+0x188>
 80046f6:	065f      	lsls	r7, r3, #25
 80046f8:	bf48      	it	mi
 80046fa:	b2ad      	uxthmi	r5, r5
 80046fc:	6031      	str	r1, [r6, #0]
 80046fe:	07d9      	lsls	r1, r3, #31
 8004700:	bf44      	itt	mi
 8004702:	f043 0320 	orrmi.w	r3, r3, #32
 8004706:	6023      	strmi	r3, [r4, #0]
 8004708:	b11d      	cbz	r5, 8004712 <_printf_i+0x19e>
 800470a:	2310      	movs	r3, #16
 800470c:	e7ac      	b.n	8004668 <_printf_i+0xf4>
 800470e:	4827      	ldr	r0, [pc, #156]	@ (80047ac <_printf_i+0x238>)
 8004710:	e7e9      	b.n	80046e6 <_printf_i+0x172>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f023 0320 	bic.w	r3, r3, #32
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	e7f6      	b.n	800470a <_printf_i+0x196>
 800471c:	4616      	mov	r6, r2
 800471e:	e7bd      	b.n	800469c <_printf_i+0x128>
 8004720:	6833      	ldr	r3, [r6, #0]
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	6961      	ldr	r1, [r4, #20]
 8004726:	1d18      	adds	r0, r3, #4
 8004728:	6030      	str	r0, [r6, #0]
 800472a:	062e      	lsls	r6, r5, #24
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	d501      	bpl.n	8004734 <_printf_i+0x1c0>
 8004730:	6019      	str	r1, [r3, #0]
 8004732:	e002      	b.n	800473a <_printf_i+0x1c6>
 8004734:	0668      	lsls	r0, r5, #25
 8004736:	d5fb      	bpl.n	8004730 <_printf_i+0x1bc>
 8004738:	8019      	strh	r1, [r3, #0]
 800473a:	2300      	movs	r3, #0
 800473c:	6123      	str	r3, [r4, #16]
 800473e:	4616      	mov	r6, r2
 8004740:	e7bc      	b.n	80046bc <_printf_i+0x148>
 8004742:	6833      	ldr	r3, [r6, #0]
 8004744:	1d1a      	adds	r2, r3, #4
 8004746:	6032      	str	r2, [r6, #0]
 8004748:	681e      	ldr	r6, [r3, #0]
 800474a:	6862      	ldr	r2, [r4, #4]
 800474c:	2100      	movs	r1, #0
 800474e:	4630      	mov	r0, r6
 8004750:	f7fb fd46 	bl	80001e0 <memchr>
 8004754:	b108      	cbz	r0, 800475a <_printf_i+0x1e6>
 8004756:	1b80      	subs	r0, r0, r6
 8004758:	6060      	str	r0, [r4, #4]
 800475a:	6863      	ldr	r3, [r4, #4]
 800475c:	6123      	str	r3, [r4, #16]
 800475e:	2300      	movs	r3, #0
 8004760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004764:	e7aa      	b.n	80046bc <_printf_i+0x148>
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	4632      	mov	r2, r6
 800476a:	4649      	mov	r1, r9
 800476c:	4640      	mov	r0, r8
 800476e:	47d0      	blx	sl
 8004770:	3001      	adds	r0, #1
 8004772:	d0ad      	beq.n	80046d0 <_printf_i+0x15c>
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	079b      	lsls	r3, r3, #30
 8004778:	d413      	bmi.n	80047a2 <_printf_i+0x22e>
 800477a:	68e0      	ldr	r0, [r4, #12]
 800477c:	9b03      	ldr	r3, [sp, #12]
 800477e:	4298      	cmp	r0, r3
 8004780:	bfb8      	it	lt
 8004782:	4618      	movlt	r0, r3
 8004784:	e7a6      	b.n	80046d4 <_printf_i+0x160>
 8004786:	2301      	movs	r3, #1
 8004788:	4632      	mov	r2, r6
 800478a:	4649      	mov	r1, r9
 800478c:	4640      	mov	r0, r8
 800478e:	47d0      	blx	sl
 8004790:	3001      	adds	r0, #1
 8004792:	d09d      	beq.n	80046d0 <_printf_i+0x15c>
 8004794:	3501      	adds	r5, #1
 8004796:	68e3      	ldr	r3, [r4, #12]
 8004798:	9903      	ldr	r1, [sp, #12]
 800479a:	1a5b      	subs	r3, r3, r1
 800479c:	42ab      	cmp	r3, r5
 800479e:	dcf2      	bgt.n	8004786 <_printf_i+0x212>
 80047a0:	e7eb      	b.n	800477a <_printf_i+0x206>
 80047a2:	2500      	movs	r5, #0
 80047a4:	f104 0619 	add.w	r6, r4, #25
 80047a8:	e7f5      	b.n	8004796 <_printf_i+0x222>
 80047aa:	bf00      	nop
 80047ac:	080048e5 	.word	0x080048e5
 80047b0:	080048f6 	.word	0x080048f6

080047b4 <_realloc_r>:
 80047b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b8:	4680      	mov	r8, r0
 80047ba:	4615      	mov	r5, r2
 80047bc:	460c      	mov	r4, r1
 80047be:	b921      	cbnz	r1, 80047ca <_realloc_r+0x16>
 80047c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047c4:	4611      	mov	r1, r2
 80047c6:	f7ff bbb3 	b.w	8003f30 <_malloc_r>
 80047ca:	b92a      	cbnz	r2, 80047d8 <_realloc_r+0x24>
 80047cc:	f7ff fcc2 	bl	8004154 <_free_r>
 80047d0:	2400      	movs	r4, #0
 80047d2:	4620      	mov	r0, r4
 80047d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d8:	f000 f834 	bl	8004844 <_malloc_usable_size_r>
 80047dc:	4285      	cmp	r5, r0
 80047de:	4606      	mov	r6, r0
 80047e0:	d802      	bhi.n	80047e8 <_realloc_r+0x34>
 80047e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80047e6:	d8f4      	bhi.n	80047d2 <_realloc_r+0x1e>
 80047e8:	4629      	mov	r1, r5
 80047ea:	4640      	mov	r0, r8
 80047ec:	f7ff fba0 	bl	8003f30 <_malloc_r>
 80047f0:	4607      	mov	r7, r0
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d0ec      	beq.n	80047d0 <_realloc_r+0x1c>
 80047f6:	42b5      	cmp	r5, r6
 80047f8:	462a      	mov	r2, r5
 80047fa:	4621      	mov	r1, r4
 80047fc:	bf28      	it	cs
 80047fe:	4632      	movcs	r2, r6
 8004800:	f7ff fc9a 	bl	8004138 <memcpy>
 8004804:	4621      	mov	r1, r4
 8004806:	4640      	mov	r0, r8
 8004808:	f7ff fca4 	bl	8004154 <_free_r>
 800480c:	463c      	mov	r4, r7
 800480e:	e7e0      	b.n	80047d2 <_realloc_r+0x1e>

08004810 <memmove>:
 8004810:	4288      	cmp	r0, r1
 8004812:	b510      	push	{r4, lr}
 8004814:	eb01 0402 	add.w	r4, r1, r2
 8004818:	d902      	bls.n	8004820 <memmove+0x10>
 800481a:	4284      	cmp	r4, r0
 800481c:	4623      	mov	r3, r4
 800481e:	d807      	bhi.n	8004830 <memmove+0x20>
 8004820:	1e43      	subs	r3, r0, #1
 8004822:	42a1      	cmp	r1, r4
 8004824:	d008      	beq.n	8004838 <memmove+0x28>
 8004826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800482a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800482e:	e7f8      	b.n	8004822 <memmove+0x12>
 8004830:	4402      	add	r2, r0
 8004832:	4601      	mov	r1, r0
 8004834:	428a      	cmp	r2, r1
 8004836:	d100      	bne.n	800483a <memmove+0x2a>
 8004838:	bd10      	pop	{r4, pc}
 800483a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800483e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004842:	e7f7      	b.n	8004834 <memmove+0x24>

08004844 <_malloc_usable_size_r>:
 8004844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004848:	1f18      	subs	r0, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfbc      	itt	lt
 800484e:	580b      	ldrlt	r3, [r1, r0]
 8004850:	18c0      	addlt	r0, r0, r3
 8004852:	4770      	bx	lr

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr
